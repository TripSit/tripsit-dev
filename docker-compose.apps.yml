version: '3.9'

name: tripsit-live

########################### EXTENSION FIELDS
# Common environment values
x-environment: &default-tz-puid-pgid
  TZ: $TZ
  PUID: $PUID
  PGID: $PGID
 
# Keys common to some of the core services that we always to automatically restart on failure
x-common-keys-core: &common-keys-core
  security_opt:
    - no-new-privileges:true
  restart: always

# Keys common to some of the dependent services/apps
x-common-keys-apps: &common-keys-apps
  security_opt:
    - no-new-privileges:true
  restart: unless-stopped

########################### SERVICES
services:
  # Admin
  dozzle:
    <<: *common-keys-apps
    image: amir20/dozzle:latest
    container_name: dozzle
    networks:
      dozzle-net:
      socket-net:
    environment:
      <<: *default-tz-puid-pgid
      DOCKER_HOST: tcp://socket-proxy:2375
      DOZZLE_LEVEL: info
      DOZZLE_TAILSIZE: 300
      DOZZLE_FILTER: "status=running"
    labels:
      - com.centurylinklabs.watchtower.enable=true
      - traefik.enable=true
      - traefik.docker.network=dozzle-net
      - traefik.http.services.dozzle-svc.loadbalancer.server.port=8080
      - traefik.http.routers.dozzle-rtr.rule=Host(`logs.${DNS_DOMAIN}`)
      - traefik.http.routers.dozzle-rtr.entrypoints=websecure
      - traefik.http.routers.dozzle-rtr.tls=true
      - traefik.http.routers.dozzle-rtr.service=dozzle-svc
      - traefik.http.routers.dozzle-rtr.middlewares=basicAuth@file
    healthcheck:
      test: [ "CMD", "/dozzle", "healthcheck" ]
      interval: 3s
      timeout: 30s
      retries: 5
      start_period: 30s

  netdata:
    <<: *common-keys-apps
    image: netdata/netdata
    # user: ${PUID:-1000}
    container_name: netdata
    hostname: "${DNS_DOMAIN}"
    cap_add:
      - SYS_PTRACE
    security_opt:
      - apparmor:unconfined
    environment:
      <<: *default-tz-puid-pgid
      DOCKER_HOST: tcp://socket-proxy:2375
    #   - NETDATA_CLAIM_TOKEN=/run/secrets/netdata_claim_token
    #   - NETDATA_CLAIM_URL=https://app.netdata.cloud
    #   - NETDATA_CLAIM_ROOMS=/run/secrets/netdata_claim_rooms
    networks:
      - socket-net
      - netdata-net
    volumes:
      - ${DOCKERDIR}/appdata/netdata/config:/etc/netdata
      - ${DOCKERDIR}/appdata/netdata/lib:/var/lib/netdata
      - ${DOCKERDIR}/appdata/netdata/cache:/var/cache/netdata
      - /etc/passwd:/host/etc/passwd:ro
      - /etc/group:/host/etc/group:ro
      - /sys:/host/sys:ro
      - /etc/os-release:/host/etc/os-release:ro
    labels:
      - com.centurylinklabs.watchtower.enable=true
      - traefik.enable=true
      - traefik.docker.network=netdata-net
      - traefik.http.services.netdata-svc.loadbalancer.server.port=19999
      - traefik.http.routers.netdata-rtr.rule=Host(`netdata.${DNS_DOMAIN}`)
      - traefik.http.routers.netdata-rtr.entrypoints=websecure
      - traefik.http.routers.netdata-rtr.service=netdata-svc
      - traefik.http.routers.netdata-rtr.tls=true
      - traefik.http.routers.netdata-rtr.middlewares=basicAuth@file

  duplicati:
    <<: *common-keys-apps
    image: ghcr.io/linuxserver/duplicati:latest
    # image: duplicati/duplicati
    container_name: duplicati
    networks:
      - duplicati-net
    environment:
      - TZ=${TIME_ZONE}
      - PUID=0
      - PGID=0
    volumes:
      - ${DOCKERDIR}/appdata/duplicati/config:/config
      - ${DOCKERDIR}/appdata/duplicati/data:/app/data
      - ${DOCKERDIR}:/sources/docker
      - /home/moonbear/:/sources/moonbear
    labels:
      - com.centurylinklabs.watchtower.enable=true
      - traefik.enable=true
      - traefik.docker.network=duplicati-net
      - traefik.http.services.duplicati-svc.loadbalancer.server.port=8200
      - traefik.http.routers.duplicati-rtr.rule=Host(`backups.${DNS_DOMAIN}`)
      - traefik.http.routers.duplicati-rtr.entrypoints=websecure
      - traefik.http.routers.duplicati-rtr.service=duplicati-svc
      - traefik.http.routers.duplicati-rtr.tls=true
      - traefik.http.routers.duplicati-rtr.middlewares=basicAuth@file

  it-tools:
    <<: *common-keys-apps
    image: corentinth/it-tools
    container_name: tools
    networks:
      - it-net
    labels:
      - com.centurylinklabs.watchtower.enable=true
      - traefik.enable=true
      - traefik.docker.network=it-net
      - traefik.http.services.tools-svc.loadbalancer.server.port=80
      - traefik.http.routers.tools-rtr.rule=Host(`tools.${DNS_DOMAIN}`)
      - traefik.http.routers.tools-rtr.entrypoints=websecure
      - traefik.http.routers.tools-rtr.tls=true
      - traefik.http.routers.tools-rtr.service=tools-svc
      - traefik.http.routers.tools-rtr.middlewares=basicAuth@file

  uptime-kuma:
    <<: *common-keys-core
    image: louislam/uptime-kuma
    container_name: kuma
    environment:
      <<: *default-tz-puid-pgid
      DOCKER_HOST: tcp://socket-proxy:2375
    networks:
      - kuma-net
      - socket-net
      - database-net
    volumes:
      - ${DOCKERDIR}/appdata/uptime-kuma/data:/app/data
    labels:
      - com.centurylinklabs.watchtower.enable=true
      - traefik.enable=true
      - traefik.docker.network=kuma-net
      - traefik.http.services.kuma-svc.loadbalancer.server.port=3001
      - traefik.http.routers.kuma-rtr.rule=Host(`uptime.${DNS_DOMAIN}`)
      - traefik.http.routers.kuma-rtr.entrypoints=websecure
      - traefik.http.routers.kuma-rtr.tls=true
      - traefik.http.routers.kuma-rtr.service=kuma-svc
      - traefik.http.routers.kuma-rtr.middlewares=basicAuth@file

  filebrowser:
    <<: *common-keys-apps
    image: filebrowser/filebrowser:s6
    container_name: files
    networks:
      - files-net
    volumes:
      - ${DOCKERDIR}/appdata/filebrowser/data:/app/data
      - ${DOCKERDIR}/appdata/filebrowser/config:/config
      - ${USERDIR}:/data/home
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - com.centurylinklabs.watchtower.enable=true
      - traefik.enable=true
      - traefik.docker.network=files-net
      - traefik.http.services.filebrowser-svc.loadbalancer.server.port=80
      - traefik.http.routers.filebrowser-rtr.rule=Host(`files.${DNS_DOMAIN}`)
      - traefik.http.routers.filebrowser-rtr.entrypoints=websecure
      - traefik.http.routers.filebrowser-rtr.tls=true
      - traefik.http.routers.filebrowser-rtr.service=filebrowser-svc
      - traefik.http.routers.filebrowser-rtr.middlewares=basicAuth@file

  gotify:
    <<: *common-keys-apps
    image: gotify/server
    container_name: gotify
    volumes:
      - ${DOCKERDIR}/appdata/gotify/data:/app/data
    environment:
      <<: *default-tz-puid-pgid
    networks:
      - gotify-net
    labels:
      - com.centurylinklabs.watchtower.enable=true
      - traefik.enable=true
      - traefik.docker.network=gotify-net
      - traefik.http.services.gotify-svc.loadbalancer.server.port=80
      - traefik.http.routers.gotify-rtr.rule=Host(`alerts.${DNS_DOMAIN}`)
      - traefik.http.routers.gotify-rtr.entrypoints=websecure
      - traefik.http.routers.gotify-rtr.tls=true
      - traefik.http.routers.gotify-rtr.service=gotify-svc
      - traefik.http.routers.gotify-rtr.middlewares=default@file

  # Backend
  traefik-cloudflare-companion:
    <<: *common-keys-apps
    image: tiredofit/traefik-cloudflare-companion:latest
    container_name: cf_companion
    networks:
      - socket-net
    environment:
      <<: *default-tz-puid-pgid
      DOCKER_HOST: tcp://socket-proxy:2375
      TIMEZONE: $TZ
      TRAEFIK_VERSION: 2
      CF_EMAIL: $CF_EMAIL
      CF_TOKEN: $CF_API_KEY
      TARGET_DOMAIN: $DNS_DOMAIN
      DOMAIN1: $DNS_DOMAIN
      DOMAIN1_ZONE_ID: $DNS_DOMAIN_ZONE_ID
      DOMAIN1_PROXIED: TRUE
    labels:
      - com.centurylinklabs.watchtower.enable=true
      - traefik.enable=false

  watchtower:
    <<: *common-keys-apps
    image: containrrr/watchtower
    container_name: watchtower
    networks:
      - socket-net
    environment:
      <<: *default-tz-puid-pgid
      DOCKER_HOST: tcp://socket-proxy:2375
      WATCHTOWER_CLEANUP: "true"
      WATCHTOWER_REMOVE_VOLUMES: "true"
      WATCHTOWER_INCLUDE_STOPPED: "true"
      WATCHTOWER_NO_STARTUP_MESSAGE: "false"
      WATCHTOWER_SCHEDULE: "0 30 12 * * *"
      DOCKER_API_VERSION: "1.40"
    labels:
      - com.centurylinklabs.watchtower.enable=true
      - traefik.enable=false 

  # Wordpress
  nginx:
    <<: *common-keys-apps
    image: nginx:1.18
    container_name: nginx
    depends_on:
      - php7
      - mariadb-wordpress
    networks:
      - nginx-net
      - nginx-private-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /var/log/nginx:/var/log/nginx
      - ${DOCKERDIR}/nginx:/etc/nginx
      #- ${DOCKERDIR}/shared/.htpassd:/shared/.htpasswd
      - ${DOCKERDIR}/sites/wordpress:/var/www/html/wordpress
      # - ${DOCKERDIR}/sites/shb/html:/var/www/html/shb
      # - ${DOCKERDIR}/sites/khub/html:/var/www/html/khub
      # - ${DOCKERDIR}/sites/dash/html:/var/www/html/dash
    labels:
      - com.centurylinklabs.watchtower.enable=false
      - traefik.enable=true
      - traefik.docker.network=nginx-net
      ## HTTP Routers SHB (WordPress) Auth
      - "traefik.http.routers.nginx-shb-auth-rtr.entrypoints=websecure"
      - "traefik.http.routers.nginx-shb-auth-rtr.rule=Host(`www.$DNS_DOMAIN`) && Path(`/wp-login.php`)"
      - "traefik.http.routers.nginx-shb-auth-rtr.priority=100"
      ## HTTP Routers SHB (WordPress) Bypass
      - "traefik.http.routers.nginx-shb-rtr.entrypoints=websecure"
      - "traefik.http.routers.nginx-shb-rtr.rule=Host(`$DNS_DOMAIN`) || Host(`www.$DNS_DOMAIN`)"
      - "traefik.http.routers.nginx-shb-rtr.priority=99"
      ## HTTP Routers DASH (non-WordPress)
      # - "traefik.http.routers.nginx-dash-rtr.entrypoints=websecure"
      # - "traefik.http.routers.nginx-dash-rtr.rule=Host(`dash.$DNS_DOMAIN`)"
      ## HTTP Routers KHUB (non-WordPress)
      # - "traefik.http.routers.nginx-khub-rtr.entrypoints=websecure"
      # - "traefik.http.routers.nginx-khub-rtr.rule=Host(`$OTHER_DOMAIN`) || Host(`www.$OTHER_DOMAIN`)"
      # Redirect shb non-www to www middleware
      - "traefik.http.middlewares.shb-redirect.redirectregex.regex=^https?://$DNS_DOMAIN/(.*)"
      - "traefik.http.middlewares.shb-redirect.redirectregex.replacement=https://www.$DNS_DOMAIN/$${1}"
      - "traefik.http.middlewares.shb-redirect.redirectregex.permanent=true"
      # Redirect khub non-www to www middleware
      # - "traefik.http.middlewares.khub-redirect.redirectregex.regex=^https?://$OTHER_DOMAIN/(.*)"
      # - "traefik.http.middlewares.khub-redirect.redirectregex.replacement=https://www.$OTHER_DOMAIN/$${1}"
      # - "traefik.http.middlewares.khub-redirect.redirectregex.permanent=true"
      ## Middlewares
      # - "traefik.http.routers.nginx-khub-rtr.middlewares=khub-redirect,default@file"
      # - "traefik.http.routers.nginx-shb-rtr.middlewares=shb-redirect,default@file"
      # - "traefik.http.routers.nginx-shb-auth-rtr.middlewares=shb-redirect,basicAuth@file"
      # - "traefik.http.routers.nginx-dash-rtr.middlewares=basicAuth@file"
      ## HTTP Services
      - "traefik.http.routers.nginx-shb-rtr.service=nginx-svc"
      - "traefik.http.routers.nginx-shb-auth-rtr.service=nginx-svc"
      # - "traefik.http.routers.nginx-khub-rtr.service=nginx-svc"
      # - "traefik.http.routers.nginx-dash-rtr.service=nginx-svc"
      - "traefik.http.services.nginx-svc.loadbalancer.server.port=80"

  php7:
    <<: *common-keys-apps
    image: php:7.4-fpm-custom
    container_name: php7
    build:
      context: ${DOCKERDIR}/custom/
      dockerfile: Dockerfile-php7
    user: $PUID:$PGID # allows upgrading WP and plugins
    networks:
      - nginx-private-net
    volumes:
      - ${DOCKERDIR}/sites/wordpress:/var/www/html/wordpress
      - ${DOCKERDIR}/php/php7:/usr/local/etc/php
      # - ${DOCKERDIR}/sites/khub/html:/var/www/html/khub
      # - ${DOCKERDIR}/sites/dash/html:/var/www/html/dash
    labels:
      - com.centurylinklabs.watchtower.enable=false
      - traefik.enable=false

  mariadb-wordpress:
    <<: *common-keys-apps
    image: linuxserver/mariadb:110.4.14mariabionic-ls77
    container_name: wordpress-db
    networks:
      - nginx-private-net
    # secrets:
    #   - wordpress_db_root
    volumes:
      - ${DOCKERDIR}/appdata/wordpress_db/config:/config
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    environment:
      <<: *default-tz-puid-pgid
      MYSQL_ROOT_PASSWORD: ${WORDPRESS_DB_ROOT}
      # MYSQL_ROOT_PASSWORD_FILE: /run/secrets/wordpress_db_root
    labels:
      - com.centurylinklabs.watchtower.enable=false
      - traefik.enable=false
  
  # Drone
  drone:
    <<: *common-keys-apps
    image: drone/drone:2
    container_name: drone
    environment:
      <<: *default-tz-puid-pgid
      DRONE_SERVER_HOST: drone.tripsit.io
      DRONE_SERVER_PROTO: https
      DRONE_GITHUB_CLIENT_ID: ${DRONE_GITHUB_CLIENT_ID}
      DRONE_GITHUB_CLIENT_SECRET: ${DRONE_GITHUB_CLIENT_SECRET}
      DRONE_RPC_SECRET: ${DRONE_RPC_SECRET}
      DRONE_USER_FILTER: ${DRONE_USER_FILTER}
      DRONE_USER_CREATE: ${DRONE_USER_CREATE}
    networks:
      - drone-net
      - drone_private-net
    volumes:
      - ${DOCKERDIR}/appdata/drone/data:/data
    labels:
    - com.centurylinklabs.watchtower.enable=true
    - traefik.enable=true
    - traefik.docker.network=drone-net
    - traefik.http.services.drone-svc.loadbalancer.server.port=80
    - traefik.http.routers.drone-rtr.rule=Host(`drone.${DNS_DOMAIN}`)
    - traefik.http.routers.drone-rtr.entrypoints=websecure
    - traefik.http.routers.drone-rtr.service=drone-svc
    - traefik.http.routers.drone-rtr.tls=true
    - traefik.http.routers.drone-rtr.middlewares=default@file

  drone_runner:
    <<: *common-keys-apps
    image: drone/drone-runner-docker:1
    container_name: drone_runner
    networks:
      - drone_private-net
      - socket-net
    volumes:
      - ${USERDIR}/tripsit-live/docker-compose.yml:/docker/docker-compose.yml:ro
    environment:
      <<: *default-tz-puid-pgid
      DOCKER_HOST: tcp://socket-proxy:2375
      # DRONE_RPC_PROTO: http
      DRONE_RPC_HOST: drone
      DRONE_RPC_SECRET: ${DRONE_RPC_SECRET}
      DRONE_RUNNER_CAPACITY: 2
      DRONE_RUNNER_NAME: drone_runner
      DRONE_DOCKER_NETWORK_ID: socket-net
      DRONE_RUNNER_NETWORKS: socket-net
      DRONE_RUNNER_PRIVILEGED_IMAGES: plugins/docker, docker
      DRONE_RUNNER_VOLUMES: ${USERDIR}/tripsit-live/docker-compose.yml:/drone/src/docker-compose.host.yml,${USERDIR}/tripsit-live/.env:/drone/src/.env
    # labels: 
    #   - traefik.enable=false
  
  # Frontend
  organizr:
    <<: *common-keys-apps
    image: organizr/organizr
    container_name: organizr
    environment:
      <<: *default-tz-puid-pgid
      fpm: true
    networks:
      organizr-net:
    volumes:
      - ${DOCKERDIR}/appdata/organizr/config:/config
    labels:
      - com.centurylinklabs.watchtower.enable=true
      - traefik.enable=true
      - traefik.docker.network=organizr-net
      - traefik.http.services.organizr-svc.loadbalancer.server.port=80
      - traefik.http.routers.organizr-rtr.rule=Host(`home.${DNS_DOMAIN}`)
      - traefik.http.routers.organizr-rtr.entrypoints=websecure
      - traefik.http.routers.organizr-rtr.service=organizr-svc
      - traefik.http.routers.organizr-rtr.tls=true
      - traefik.http.routers.organizr-rtr.middlewares=default@file

  lounge_vip:
    <<: *common-keys-apps
    image: thelounge/thelounge:latest
    container_name: lounge_vip
    networks:
      - lounge-net
    volumes:
      - ${DOCKERDIR}/appdata/lounge_vip/:/var/opt/thelounge
    labels:
    - com.centurylinklabs.watchtower.enable=true
    - traefik.enable=true
    - traefik.docker.network=lounge-net
    - traefik.http.services.lounge-svc.loadbalancer.server.port=9000
    - traefik.http.routers.lounge-rtr.rule=Host(`lounge.${DNS_DOMAIN}`)
    - traefik.http.routers.lounge-rtr.entrypoints=websecure
    - traefik.http.routers.lounge-rtr.service=lounge-svc
    - traefik.http.routers.lounge-rtr.tls=true
    - traefik.http.routers.lounge-rtr.middlewares=default@file

  privatebin:
    <<: *common-keys-apps
    image: privatebin/nginx-fpm-alpine
    container_name: privatebin
    networks:
      - privatebin-net
      # - socket-net
    volumes:
      - ${DOCKERDIR}/appdata/privatebin/data:/srv/data 
    labels:
      # - DOCKER_HOST=tcp://socket-proxy:2375
      - com.centurylinklabs.watchtower.enable=true
      - traefik.enable=true
      - traefik.docker.network=privatebin-net
      - traefik.http.services.privatebin-svc.loadbalancer.server.port=8080
      - traefik.http.routers.privatebin-rtr.rule=Host(`privatebin.${DNS_DOMAIN}`)
      - traefik.http.routers.privatebin-rtr.entrypoints=websecure
      - traefik.http.routers.privatebin-rtr.service=privatebin-svc
      - traefik.http.routers.privatebin-rtr.tls=true
      - traefik.http.routers.privatebin-rtr.middlewares=basicAuth@file

  trilium:
    <<: *common-keys-apps
    image: 'zadam/trilium:latest'
    container_name: trilium
    volumes:
      - ${DOCKERDIR}/appdata/trilium/data:/home/node/trilium-data
    networks:
      - trilium-net
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - com.centurylinklabs.watchtower.enable=true
      - traefik.enable=true
      - traefik.docker.network=trilium-net
      - traefik.http.services.trilium-svc.loadbalancer.server.port=8080
      - traefik.http.routers.trilium-rtr.rule=Host(`notes.${DNS_DOMAIN}`)
      - traefik.http.routers.trilium-rtr.service=trilium-svc
      - traefik.http.routers.trilium-rtr.entrypoints=websecure
      - traefik.http.routers.trilium-rtr.tls=true
      - traefik.http.routers.trilium-rtr.middlewares=basicAuth@file

  # TripBot Website
  tripbot_website:
    <<: *common-keys-apps
    build:
      context: https://github.com/tripsit/tripbot-website.git#main
      dockerfile: ./Dockerfile
      # Only will build development stage from our dockerfile
      # target: development
    container_name: tripbot_website
    working_dir: /usr/src/app
    # ports:
    #   - "8080:8080"
    networks:
      - tripbot-net
    environment:
      <<: *default-tz-puid-pgid
    labels:
    - com.centurylinklabs.watchtower.enable=true
    - traefik.enable=true
    - traefik.docker.network=tripbot-net
    - traefik.http.services.tripbot_website-svc.loadbalancer.server.port=8080
    - traefik.http.routers.tripbot_website-rtr.rule=Host(`tripbot.${DNS_DOMAIN}`, `${OTHER_DOMAIN}`)
    - traefik.http.routers.tripbot_website-rtr.entrypoints=websecure
    - traefik.http.routers.tripbot_website-rtr.service=tripbot_website-svc
    - traefik.http.routers.tripbot_website-rtr.tls=true
    - traefik.http.routers.tripbot_website-rtr.middlewares=default@file
    # command: npx vite --host # For development

  # TripBot - Use specific repo
  tripbot:
    <<: *common-keys-apps
    build:
      context: https://github.com/tripsit/tripbot.git#Docker-update
      dockerfile: ./Dockerfile
      # Only will build development stage from our dockerfile
      # target: development
    container_name: tripbot
    working_dir: /usr/src/app
    environment:
      <<: *default-tz-puid-pgid
      DISCORD_GUILD_ID: 
      DISCORD_OWNER_ID: ${DISCORD_OWNER_ID}
      DISCORD_CLIENT_ID: ${DISCORD_CLIENT_ID}
      DISCORD_CLIENT_TOKEN: ${DISCORD_CLIENT_TOKEN}
      DISCORD_CLIENT_SECRET: ${DISCORD_CLIENT_SECRET}
      DISCORD_CLIENT_REDIRECT_URI: ${DISCORD_CLIENT_REDIRECT_URI}
      GITHUB_TOKEN: ${GITHUB_TOKEN}
      RAPID_TOKEN: ${RAPID_TOKEN}
      IMGUR_ID: ${IMGUR_ID}
      IMGUR_SECRET: ${IMGUR_SECRET}
      YOUTUBE_TOKEN: ${YOUTUBE_TOKEN}
      MATRIX_BOT_PASSWORD: ${MATRIX_BOT_PASSWORD}
      MOODLE_TOKEN: ${MOODLE_TOKEN}
      REVOLT_BOT_TOKEN: ${REVOLT_BOT_TOKEN}
      WOLFRAM_TOKEN: ${WOLFRAM_TOKEN}
      IMDB_TOKEN: ${IMDB_TOKEN}
      SENTRY_TOKEN: ${SENTRY_TOKEN}
      POSTGRES_DB_URL: ${POSTGRES_DB_URL}
    networks:
      - tripbot-net
      - database-net
    # volumes:
    #   - ./src:/usr/src/app/src # Needed for hot-reloading of source code
    #   - ./jest:/usr/src/app/jest # Needed for hot-reloading of tests
    #   - ./coverage:/usr/src/app/coverage # Needed for extracting the coverage report
    #   - ./.env:/usr/src/app/.env # Needed for hot-reloading the .env
    #   - ./package.json:/usr/src/app/package.json # Needed for saving changes to package.json
    #   - ./package-lock.json:/usr/src/app/package-lock.json # Needed for saving changes to package.json
    #   - /etc/timezone:/etc/timezone:ro
    #   - /etc/localtime:/etc/localtime:ro
    labels:
      # - com.centurylinklabs.watchtower.enable=true
      - traefik.enable=true
    # Run a command against the development stage of the image
    command: npx tsc-watch --onSuccess "npx nodemon --config ./nodemon.json"

  # Database
  database:
    <<: *common-keys-apps
    build:
      context: https://github.com/TripSit/database-admin.git#main
      dockerfile: ./Dockerfile-postgres
    container_name: database
    volumes:
      - ${DOCKERDIR}/appdata/database/data:/var/lib/postgresql/data
    # ports:
    #   - 5432:5432
    networks:
        - database-net
    environment:
      <<: *default-tz-puid-pgid
      POSTGRES_USER: tripsit
      POSTGRES_DB: tripsit
      POSTGRES_PASSWORD: ${POSTGRESS_ROOT}
      POSTGRES_HOST_AUTH_METHOD: trust
    labels:
      # - com.centurylinklabs.watchtower.enable=true
      - traefik.enable=false

  database_frontend:
    # <<: *common-keys-apps
    build:
      context: https://github.com/TripSit/database-admin.git#main
      dockerfile: ./Dockerfile-pgadmin
    restart: unless-stopped
    container_name: database_frontend
    depends_on:
      - database
    networks:
        - database_frontend-net
        - database-net
    environment:
      <<: *default-tz-puid-pgid
      TZ: America/Chicago
      PGADMIN_DEFAULT_EMAIL: admin@tripsit.me
      PGADMIN_DEFAULT_PASSWORD: ${POSTGRESS_ADMIN_PASS}
    labels:
    # - com.centurylinklabs.watchtower.enable=true
    - traefik.enable=true
    - traefik.docker.network=database_frontend-net
    - traefik.http.services.database_frontend-svc.loadbalancer.server.port=80
    - traefik.http.routers.database_frontend-rtr.rule=Host(`database.${DNS_DOMAIN}`)
    - traefik.http.routers.database_frontend-rtr.service=database_frontend-svc
    - traefik.http.routers.database_frontend-rtr.entrypoints=websecure
    - traefik.http.routers.database_frontend-rtr.tls=true
    - traefik.http.routers.database_frontend-rtr.middlewares=basicAuth@file
  # database_backend:
  #   <<: *common-keys-apps
  #   build:
  #     context: https://github.com/TripSit/database-admin.git#main
  #     dockerfile: ./Dockerfile
  #     # Only will build development stage from our dockerfile
  #     target: development
  #   container_name: database_backend
  #   depends_on:
  #     - database
  #   # ports:
  #   #   - 5000:5000
  #   #   - 9229:9229
  #   networks:
  #     - database_backend-net
  #     - database-net
  #   volumes:
  #     # - ./:/usr/src/app
  #     - /usr/src/app/node_modules
  #   environment:
  #     <<: *default-tz-puid-pgid
  #     PORT: 5000
  #     TZ: America/Chicago
  #     DATABASE_URL: postgres://tripsit:${POSTGRESS_ROOT}@database/tripsit
  #   labels:
  #     # - com.centurylinklabs.watchtower.enable=true
  #     - traefik.enable=true
  #     - traefik.docker.network=database_backend-net
  #     - traefik.http.services.database_backend-svc.loadbalancer.server.port=5000
  #     - traefik.http.routers.database_backend-rtr.rule=Host(`api.${DNS_DOMAIN}`)
  #     - traefik.http.routers.database_backend-rtr.entrypoints=websecure
  #     - traefik.http.routers.database_backend-rtr.service=database_backend-svc
  #     - traefik.http.routers.database_backend-rtr.tls=true
  #     - traefik.http.routers.database_backend-rtr.middlewares=basicAuth@file
  #   command: npm run start

#### TODO
  # matrix:
  #   <<: *common-keys-apps
  #   image: matrixdotorg/synapse:latest
  #   container_name: matrix
  #   networks:
  #     - matrix-net
  #   volumes:
  #     - ${DOCKERDIR}/appdata/matrix/data:/data
  #   environment:
  #     - SYNAPSE_SERVER_NAME=TripSit
  #     - SYNAPSE_REPORT_STATS=yes
  #   command: generate
  #   labels:
  #   - com.centurylinklabs.watchtower.enable=true
  #   - traefik.enable=false
  #   # - traefik.docker.network=privatebin-net
  #   # - traefik.http.services.privatebin-svc.loadbalancer.server.port=8080
  #   # - traefik.http.routers.privatebin-rtr.rule=Host(`privatebin.${DNS_DOMAIN}`)
  #   # - traefik.http.routers.privatebin-rtr.entrypoints=websecure
  #   # - traefik.http.routers.privatebin-rtr.service=privatebin-svc
  #   # - traefik.http.routers.privatebin-rtr.tls=true
  #   # - traefik.http.routers.privatebin-rtr.middlewares=basicAuth@file

  # Barman
  # barman:
  #   <<: *common-keys-apps
  #   image: ubcctlt/barman
  #   # https://hub.docker.com/r/ubcctlt/barman
  #   container_name: barman
  #   volumes:
  #     - ${DOCKERDIR}/barman/cron.d:/etc/cron.d
  #     - ${DOCKERDIR}/barman/creds:/etc/creds
  #     # Barman configs
  #     # - ${DOCKERDIR}/barman/config/barman.conf:/etc/barman.conf
  #     # - ${DOCKERDIR}/barman/config/barman.d:/etc/barman/barman.d
  #     # cron job for taking weekly basebackups
  #     # - ./basebackups.cron:/etc/cron.d/basebackups:ro
  #     # The right side of this mount should be set to BARMAN_DATA_DIR.
  #     # - ${DOCKERDIR}/appdata/barman/:/var/lib/barman
  #     # The right side of this mount should be set to BARMAN_LOG_DIR.
  #     - ${DOCKERDIR}/logs/barman:/var/log/barman
  #     # Password file
  #     # - ${DOCKERDIR}/barman/pgpass:/private/pgpass:ro
  #   networks:
  #       - tripbot-net
  #   environment:
  #     <<: *default-tz-puid-pgid
  #     # DOCKER_HOST: tcp://socket-proxy:2375
  #     BARMAN_CRON_SRC: /etc/cron.d
  #     # BARMAN_LOG_DIR: /var/log/barman
  #     # BARMAN_SSH_KEY_DIR: /private/ssh
  #     # BARMAN_PGPASSFILE: /private/pgpass
  #     BARMAN_CRON_SCHEDULE: "* * * * *"
  #     # BARMAN_BACKUP_SCHEDULE: 0 4 * * * # Every day at 4 am
  #     BARMAN_BACKUP_SCHEDULE: "0 * * * *" # Every hour
  #     # BARMAN_LOG_LEVEL: INFO
  #     DB_HOST: database
  #     DB_PORT: 5432
  #     DB_SUPERUSER: barman
  #     DB_SUPERUSER_PASSWORD: ${BARMAN_PASSWORD}
  #     DB_SUPERUSER_DATABASE: tripsit
  #     DB_REPLICATION_USER: streaming_barman
  #     DB_REPLICATION_PASSWORD: ${BARMAN_STREAMING_PASSWORD}
  #     DB_SLOT_NAME: barman
  #     DB_BACKUP_METHOD: postgres
  #     GOOGLE_APPLICATION_CREDENTIALS: /etc/creds/gcloud.json
  #   labels:
  #     # - com.centurylinklabs.watchtower.enable=true
  #     - traefik.enable=false