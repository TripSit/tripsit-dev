version: '3.9'

name: tripsit-dev

########################### EXTENSION FIELDS
# Common environment values
x-environment: &default-tz-puid-pgid
  TZ: $TZ
  PUID: $PUID
  PGID: $PGID
 
# Keys common to some of the core services that we always to automatically restart on failure
x-common-keys-core: &common-keys-core
  security_opt:
    - no-new-privileges:true
  restart: always

# Keys common to some of the dependent services/apps
x-common-keys-apps: &common-keys-apps
  security_opt:
    - no-new-privileges:true
  restart: unless-stopped

########################### SERVICES
services:
  # Core
  traefik:
    <<: *common-keys-core
    image: traefik:latest
    container_name: traefik
    profiles: ["core", "all"]
    depends_on: 
      - docker-socket-proxy
    command:
      # Global
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      # Log info
      - --log=true
      # - --log.filePath=/var/log/traefik/traefik.log
      - --log.level=DEBUG # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      # Access logs
      - --accesslog=true
      # - --accesslog.filepath=/var/log/traefik/access.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=204-299,400-499,500-599
      - --accesslog.fields.headers.names.Content-Type=keep
      - --accesslog.fields.headers.names.Referer=keep
      - --accesslog.fields.headers.names.User-Agent=keep
      # Enable the Trafik dashboard
      - --api=true
      - --api.dashboard=true
      - --api.insecure=false
      - --api.debug=true
      # Tell Traefik to discover containers using the Docker API
      - --providers.docker
      - --providers.docker.exposedbydefault=false
      # - --providers.docker.endpoint=unix://var/run/docker.sock # Use Docker Socket Proxy instead for improved security
      - --providers.docker.endpoint=tcp://socket-proxy:2375
      - --providers.docker.network=traefik-net
      - --providers.docker.swarmMode=false
      - --providers.file.directory=/data/rules # Load dynamic configuration from one or more .toml or .yml files in a directory
      - --providers.file.watch=true # Only works on top level files in the rules folder
      # Set up an insecure listener that redirects all traffic to TLS
      - --entrypoints.web.address=:80
      # - --entrypoints.web.http.redirections.entrypoint.to=websecure
      # - --entrypoints.web.http.redirections.entrypoint.scheme=https
      # # Set up the TLS configuration for our https listener
      # - --entrypoints.websecure.address=:443
      # - --entrypoints.websecure.http.tls=true
      # - --entrypoints.websecure.http.tls.certResolver=letsencrypt
      # - --entrypoints.websecure.http.tls.domains[0].main=${DNS_DOMAIN}
      # - --entrypoints.websecure.http.tls.domains[0].sans=*.${DNS_DOMAIN}
      # - --entrypoints.websecure.http.tls.domains[1].main=${OTHER_DOMAIN}
      # - --entrypoints.websecure.http.tls.domains[1].sans=*.${OTHER_DOMAIN}
      # - --entrypoints.websecure.http.tls.options=tls-opts@file
      # - --entrypoints.websecure.forwardedHeaders.trustedIPs=$CLOUDFLARE_IPS,$LOCAL_IPS
      # # Set up LetsEncrypt
      # # - --certificatesResolvers.letsencrypt.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory 
      # - --certificatesresolvers.letsencrypt.acme.dnschallenge=true
      # - --certificatesresolvers.letsencrypt.acme.dnschallenge.provider=cloudflare
      # - --certificatesresolvers.letsencrypt.acme.email=${LETSENCRYPT_EMAIL}
      # - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
      # - --certificatesresolvers.letsencrypt.acme.dnschallenge.resolvers==1.1.1.1:53,1.0.0.1:53
      # - --certificatesresolvers.letsencrypt.acme.dnschallenge.disablepropagationcheck=true
    environment:
      - DOCKER_HOST=tcp://socket-proxy:2375
      - DOMAINNAME_CLOUD_SERVER=${DNS_DOMAIN}
      # - CF_API_EMAIL=${CF_EMAIL}
      # - CF_API_KEY=${CF_API_KEY}
    ports:
      - 80:80
      # - 443:443
    volumes:
      - ${DOCKERDIR}/traefik/:/data
      - ${DOCKERDIR}/logs/traefik:/var/log/traefik
      # - ${LOCAL_MOUNT}/traefik/letsencrypt:/letsencrypt
      - /etc/traefik:/etc/traefik
    networks:
      dozzle-net:
      duplicati-net:
      database_frontend-net:
      database_backend-net:
      drone-net:
      files-net:
      gotify-net:
      gitlab-net:
      it-net:
      kuma-net:
      lounge-vip-net:
      lounge-net:
      mail-net:
      matrix-net:
      monica-net:
      netdata-net:
      nginx-net:
      oauth-net:
      organizr-net:
      portainer-net:
      postgres-net:
      privatebin-net:
      speedtest-net:
      socket-net:
      trilium-net:
      tripbot-net:
      traefik-net:
    labels:
      # - com.centurylinklabs.watchtower.enable=true
      - traefik.enable=true
      - traefik.http.routers.traefik-rtr.service=api@internal
      - traefik.http.routers.traefik-rtr.rule=Host(`traefik.${DNS_DOMAIN}`)
      - traefik.http.routers.traefik-rtr.entrypoints=web
      # - traefik.http.routers.traefik-rtr.tls.certresolver=letsencrypt
      # - traefik.http.routers.traefik-rtr.tls.domains[0].main=${DNS_DOMAIN}
      # - traefik.http.routers.traefik-rtr.tls.domains[0].sans=*.${DNS_DOMAIN}
      # - traefik.http.routers.traefik-rtr.tls.domains[1].main=${OTHER_DOMAIN}
      # - traefik.http.routers.traefik-rtr.tls.domains[1].sans=*.${OTHER_DOMAIN}
      # - traefik.http.routers.traefik-rtr.middlewares=middlewares-traefik-strip@file,chain-no-auth@file
  portainer:
    <<: *common-keys-core
    image: portainer/portainer-ce:latest
    container_name: portainer
    profiles: ["core", "admin", "all"]
    command: -H tcp://socket-proxy:2375
    depends_on: 
      - docker-socket-proxy
    networks:
      socket-net:
      portainer-net:
    volumes:
      - ${DOCKERDIR}/appdata/portainer/data/:/data
    environment:
      <<: *default-tz-puid-pgid
      DOCKER_HOST: tcp://socket-proxy:2375
    labels:
      # - com.centurylinklabs.watchtower.enable=true
      - traefik.enable=true
      - traefik.docker.network=portainer-net
      - traefik.http.services.portainer-svc.loadbalancer.server.port=9000
      - traefik.http.routers.portainer-rtr.rule=Host(`portainer.${DNS_DOMAIN}`)
      - traefik.http.routers.portainer-rtr.service=portainer-svc
      - traefik.http.routers.portainer-rtr.entrypoints=web
      # - traefik.http.routers.portainer-rtr.tls=true
      # - traefik.http.routers.portainer-rtr.middlewares=chain-no-auth@file
  docker-socket-proxy:
    <<: *common-keys-core
    image: tecnativa/docker-socket-proxy
    container_name: socket-proxy
    profiles: ["core", "all"]
    networks:
    - socket-net
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      <<: *default-tz-puid-pgid
      LOG_LEVEL: info # debug,info,notice,warning,err,crit,alert,emerg
      ## Variables match the URL prefix (i.e. AUTH blocks access to /auth/* parts of the API, etc.).
      # 0 to revoke access.
      # 1 to grant access.
      ## Granted by Default
      EVENTS: 1
      PING: 1
      VERSION: 1
      ## Revoked by Default
      # Security critical
      AUTH: 0
      SECRETS: 0
      POST: 1 # Watchtower
      # Not always needed
      BUILD: 1 # Drone
      COMMIT: 0
      CONFIGS: 0
      CONTAINERS: 1 # Traefik, portainer, etc.
      DISTRIBUTION: 0
      EXEC: 0
      IMAGES: 1 # Portainer
      INFO: 1 # Portainer
      NETWORKS: 1 # Portainer
      NODES: 0
      PLUGINS: 0
      SERVICES: 1 # Portainer
      SESSION: 0
      SWARM: 0
      SYSTEM: 0
      TASKS: 1 # Portainer
      VOLUMES: 1 # Portainer
    labels:
      - com.centurylinklabs.watchtower.enable=true
      - traefik.enable=false
  fail2ban:
    <<: *common-keys-core
    image: crazymax/fail2ban:latest
    container_name: fail2ban
    profiles: ["core", "all"]
    volumes:
      - ${DOCKERDIR}/appdata/fail2ban/log:/var/log:ro
      - ${DOCKERDIR}/appdata/fail2ban/data:/data
    environment:
      <<: *default-tz-puid-pgid
    network_mode: host
    cap_add:
    - NET_ADMIN
    - NET_RAW
    labels:
      - com.centurylinklabs.watchtower.enable=true
      - traefik.enable=false

########################### VOLUMES
volumes:
  netdata-config:
    name: netdata-config
  netdata-lib:
    name: netdata-lib
  netdata-cache:
    name: netdata-cache
  pgadmin-data:
    name: pgadmin-data

########################### NETWORKS
networks:
  codimd-net:
    name: codimd-net
  database-net:
    name: database-net
  database_frontend-net:
    name: database_frontend-net
  database_backend-net:
    name: database_backend-net
  dozzle-net:
    name: dozzle-net
  duplicati-net:
    name: duplicati-net
  drone-net:
    name: drone-net
  drone_private-net:
    name: drone_private-net
  files-net:
    name: files-net
  gotify-net:
    name: gotify-net
  gitlab-net:
    name: gitlab-net
  gitlab-net-private:
    name: gitlab-net-private
  it-net:
    name: it-net
  kuma-net:
    name: kuma-net
  lounge-vip-net:
    name: lounge-vip-net
  lounge-net:
    name: lounge-net
  matrix-net:
    name: matrix-net
  mail-net:
    name: mail-net
  monica-net:
    name: monica-net
  netdata-net:
    name: netdata-net
  nginx-net:
    name: nginx-net
  nginx-private-net:
    name: nginx-private-net
  oauth-net:
    name: oauth-net
  organizr-net:
    name: organizr-net
  portainer-net:
    name: portainer-net
  postgres-net:
    name: postgres-net
  postgres-private-net:
    name: postgres-private-net
  privatebin-net:
    name: privatebin-net
  speedtest-net:
    name: speedtest-net
  socket-net:
    name: socket-net
  traefik-net:
    name: traefik-net
  tripbot-net:
    name: tripbot-net
  trilium-net:
    name: trilium-net

#### TODO

  # matrix:
  #   <<: *common-keys-apps
  #   image: matrixdotorg/synapse:latest
  #   container_name: matrix
  #   profiles: ["apps", "matrix", "all"]
  #   networks:
  #     - matrix-net
  #   volumes:
  #     - ${DOCKERDIR}/appdata/matrix/data:/data
  #   environment:
  #     - SYNAPSE_SERVER_NAME=TripSit
  #     - SYNAPSE_REPORT_STATS=yes
  #   command: generate
  #   labels:
  #   - com.centurylinklabs.watchtower.enable=true
  #   - traefik.enable=false
  #   # - traefik.docker.network=privatebin-net
  #   # - traefik.http.services.privatebin-svc.loadbalancer.server.port=8080
  #   # - traefik.http.routers.privatebin-rtr.rule=Host(`privatebin.${DNS_DOMAIN}`)
  #   # - traefik.http.routers.privatebin-rtr.entrypoints=websecure
  #   # - traefik.http.routers.privatebin-rtr.service=privatebin-svc
  #   # - traefik.http.routers.privatebin-rtr.tls=true
  #   # - traefik.http.routers.privatebin-rtr.middlewares=chain-basic-auth@file

  # # Tripbot
  # tripbot:
  #   <<: *common-keys-apps
  #   build:
  #     context: https://github.com/tripsit/tripbot.git#Docker-update
  #     dockerfile: ./Dockerfile
  #     # Only will build development stage from our dockerfile
  #     target: development
  #   container_name: tripbot
  #   profiles: ["apps", "tripbot", "all"]
  #   volumes:
  #     - tripbot-data:/usr/src/app/ # Needed for hot-reloading of source code
  #     - /etc/timezone:/etc/timezone:ro
  #     - /etc/localtime:/etc/localtime:ro
  #   working_dir: /usr/src/app
  #   env_file:
  #     - .env
  #   environment:
  #     <<: *default-tz-puid-pgid
  #   networks:
  #       - tripbot-net
  #   # Run a command against the development stage of the image
  #   command: npx tsc-watch --onSuccess "npx nodemon --config ./nodemon.json"
  #   labels:
  #   # - com.centurylinklabs.watchtower.enable=true
  #   - traefik.enable=false


  # tripbot_website:
  #   <<: *common-keys-apps
  #   # build: https://github.com/tripsit/tripbot-website.git
  #   build:
  #     context: https://github.com/tripsit/tripbot-website.git
  #     dockerfile: ./Dockerfile
  #     # Only will build development stage from our dockerfile
  #     target: development
  #   container_name: tripbot_website
  #   profiles: ["apps", "tripbot", "all"]
  #   volumes:
  #     - tripbot_website-data:/usr/src/app/ # Needed for hot-reloading of source code
  #     - /etc/timezone:/etc/timezone:ro
  #     - /etc/localtime:/etc/localtime:ro
  #   working_dir: /usr/src/app
  #   ports:
  #     - "8080:8080"
  #   env_file:
  #     - .env
  #   environment:
  #     <<: *default-tz-puid-pgid
  #     TZ: America/Chicago
  #   networks:
  #     - tripbot-net
  #   labels:
  #   # - com.centurylinklabs.watchtower.enable=true
  #   - traefik.enable=true
  #   - traefik.docker.network=tripbot-net
  #   - traefik.http.services.tripbot_website-svc.loadbalancer.server.port=5173
  #   - traefik.http.routers.tripbot_website-rtr.rule=Host(`tripbot.${DNS_DOMAIN}`)
  #   - traefik.http.routers.tripbot_website-rtr.entrypoints=web
  #   - traefik.http.routers.tripbot_website-rtr.service=tripbot_website-svc
  #   command: npx vite --host

  # Barman
  # barman:
  #   <<: *common-keys-apps
  #   image: ubcctlt/barman
  #   # https://hub.docker.com/r/ubcctlt/barman
  #   container_name: barman
  #   profiles: ["apps", "barman", "all"]
  #   volumes:
  #     - ${DOCKERDIR}/barman/cron.d:/etc/cron.d
  #     - ${DOCKERDIR}/barman/creds:/etc/creds
  #     # Barman configs
  #     # - ${DOCKERDIR}/barman/config/barman.conf:/etc/barman.conf
  #     # - ${DOCKERDIR}/barman/config/barman.d:/etc/barman/barman.d
  #     # cron job for taking weekly basebackups
  #     # - ./basebackups.cron:/etc/cron.d/basebackups:ro
  #     # The right side of this mount should be set to BARMAN_DATA_DIR.
  #     # - ${DOCKERDIR}/appdata/barman/:/var/lib/barman
  #     # The right side of this mount should be set to BARMAN_LOG_DIR.
  #     - ${DOCKERDIR}/logs/barman:/var/log/barman
  #     # Password file
  #     # - ${DOCKERDIR}/barman/pgpass:/private/pgpass:ro

  #   networks:
  #       - tripbot-net
  #   environment:
  #     <<: *default-tz-puid-pgid
  #     # DOCKER_HOST: tcp://socket-proxy:2375
  #     BARMAN_CRON_SRC: /etc/cron.d
  #     # BARMAN_LOG_DIR: /var/log/barman
  #     # BARMAN_SSH_KEY_DIR: /private/ssh
  #     # BARMAN_PGPASSFILE: /private/pgpass
  #     BARMAN_CRON_SCHEDULE: "* * * * *"
  #     # BARMAN_BACKUP_SCHEDULE: 0 4 * * * # Every day at 4 am
  #     BARMAN_BACKUP_SCHEDULE: "0 * * * *" # Every hour
  #     # BARMAN_LOG_LEVEL: INFO
  #     DB_HOST: database
  #     DB_PORT: 5432
  #     DB_SUPERUSER: barman
  #     DB_SUPERUSER_PASSWORD: ${BARMAN_PASSWORD}
  #     DB_SUPERUSER_DATABASE: tripsit
  #     DB_REPLICATION_USER: streaming_barman
  #     DB_REPLICATION_PASSWORD: ${BARMAN_STREAMING_PASSWORD}
  #     DB_SLOT_NAME: barman
  #     DB_BACKUP_METHOD: postgres
  #     GOOGLE_APPLICATION_CREDENTIALS: /etc/creds/gcloud.json

  #   labels:
  #     # - com.centurylinklabs.watchtower.enable=true
  #     - traefik.enable=false