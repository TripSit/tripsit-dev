version: '3.9'

name: tripsit-dev

########################### EXTENSION FIELDS
# Common environment values
x-environment: &default-tz-puid-pgid
  TZ: $TZ
  PUID: $PUID
  PGID: $PGID
 
# Keys common to some of the core services that we always to automatically restart on failure
x-common-keys-core: &common-keys-core
  security_opt:
    - no-new-privileges:true
  restart: always

# Keys common to some of the dependent services/apps
x-common-keys-apps: &common-keys-apps
  security_opt:
    - no-new-privileges:true
  restart: unless-stopped

########################### SERVICES
services:
  # Core
  docker-socket-proxy:
    <<: *common-keys-core
    image: tecnativa/docker-socket-proxy
    container_name: socket-proxy
    ports:
    - "127.0.0.1:2375:2375" # Port 2375 should only ever get exposed to the internal network.
    networks:
    - socket-net
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      <<: *default-tz-puid-pgid
      LOG_LEVEL: info # debug,info,notice,warning,err,crit,alert,emerg
      ## Variables match the URL prefix (i.e. AUTH blocks access to /auth/* parts of the API, etc.).
      # 0 to revoke access.
      # 1 to grant access.
      ## Granted by Default
      EVENTS: 1
      PING: 1
      VERSION: 1
      ## Revoked by Default
      # Security critical
      AUTH: 0
      SECRETS: 0
      POST: 1 # Watchtower
      # Not always needed
      BUILD: 1 # Drone
      COMMIT: 0
      CONFIGS: 0
      CONTAINERS: 1 # Traefik, portainer, etc.
      DISTRIBUTION: 0
      EXEC: 0
      IMAGES: 1 # Portainer
      INFO: 1 # Portainer
      NETWORKS: 1 # Portainer
      NODES: 0
      PLUGINS: 0
      SERVICES: 1 # Portainer
      SESSION: 0
      SWARM: 0
      SYSTEM: 0
      TASKS: 1 # Portainer
      VOLUMES: 1 # Portainer
    labels:
      - com.centurylinklabs.watchtower.enable=true
      - traefik.enable=false
  
  portainer:
    <<: *common-keys-core
    image: portainer/portainer-ce:latest
    container_name: portainer
    command: -H tcp://socket-proxy:2375
    depends_on: 
      - docker-socket-proxy
    # ports:
    #   - 9000:9000
    networks:
      socket-net:
      portainer-net:
    volumes:
      # - ${DOCKERDIR}/appdata/portainer/data/:/data
      - portainer-data:/data
    environment:
      <<: *default-tz-puid-pgid
      DOCKER_HOST: tcp://socket-proxy:2375
    labels:
      - com.centurylinklabs.watchtower.enable=true
      - traefik.enable=true
      - traefik.docker.network=portainer-net
      - traefik.http.services.portainer-svc.loadbalancer.server.port=9000

      - traefik.http.routers.portainer-cloudflare.rule=Host(`portainer.${DNS_DOMAIN}`)
      - traefik.http.routers.portainer-cloudflare.service=portainer-svc
      # - traefik.http.routers.portainer-cloudflare.tls.certresolver=letsencrypt
      - traefik.http.routers.portainer-cloudflare.middlewares=default@file
      - traefik.http.routers.portainer-cloudflare.entrypoints=web
      
      # - traefik.http.routers.portainer-namecheap.rule=Host(`portainer.tripsit.me`)
      # - traefik.http.routers.portainer-namecheap.tls.certresolver=letsencrypt-legacy
      # - traefik.http.routers.portainer-namecheap.service=portainer-svc
      # - traefik.http.routers.portainer-namecheap.middlewares=default@file
      # - traefik.http.routers.portainer-namecheap.entrypoints=websecure

  traefik:
    <<: *common-keys-core
    image: traefik:latest
    container_name: traefik
    environment:
      - DOCKER_HOST=tcp://socket-proxy:2375
      - DOMAINNAME_CLOUD_SERVER=${DNS_DOMAIN}
      # - CF_API_EMAIL=${CF_EMAIL}
      # - CF_API_KEY=${CF_API_KEY}
      # - NAMECHEAP_API_USER=${NAMECHEAP_API_USER}
      # - NAMECHEAP_API_KEY=${NAMECHEAP_API_KEY}
    ports:
      - 80:80
      - 443:443
    volumes:
      # - ${DOCKERDIR}/traefik/:/data
      - traefik-data:/data
      # - ${DOCKERDIR}/logs/traefik:/var/log/traefik
      # - ${LOCAL_MOUNT}/traefik/letsencrypt:/letsencrypt
      # - /etc/traefik:/etc/traefik
    networks:
      - database_pgadmin-net
      - database_api-net
      - portainer-net
      - socket-net
      - traefik-net
    labels:
      - com.centurylinklabs.watchtower.enable=true
      - traefik.enable=true
      - traefik.docker.network=traefik-net

      - traefik.http.routers.traefik-cloudflare.rule=Host(`traefik.${DNS_DOMAIN}`)
      # - traefik.http.routers.traefik-cloudflare.tls.certresolver=letsencrypt
      # - traefik.http.routers.traefik-cloudflare.tls.domains[0].main=${DNS_DOMAIN}
      # - traefik.http.routers.traefik-cloudflare.tls.domains[0].sans=*.${DNS_DOMAIN}
      # - traefik.http.routers.traefik-cloudflare.tls.domains[1].main=${OTHER_DOMAIN}
      # - traefik.http.routers.traefik-cloudflare.tls.domains[1].sans=*.${OTHER_DOMAIN}
      - traefik.http.routers.traefik-cloudflare.service=api@internal
      - traefik.http.routers.traefik-cloudflare.middlewares=stripprefix-traefik@file,basicAuth@file
      - traefik.http.routers.traefik-cloudflare.entrypoints=web
      
      # - traefik.http.routers.traefik-namecheap.rule=Host(`traefik.tripsit.me`)
      # - traefik.http.routers.traefik-namecheap.tls.certresolver=letsencrypt-legacy
      # - traefik.http.routers.traefik-namecheap.tls.domains[0].main=tripsit.me
      # - traefik.http.routers.traefik-namecheap.tls.domains[0].sans=*.tripsit.me
      # - traefik.http.routers.traefik-namecheap.service=api@internal
      # - traefik.http.routers.traefik-namecheap.middlewares=stripprefix-traefik@file,basicAuth@file
      # - traefik.http.routers.traefik-namecheap.entrypoints=websecure
    command:
      # Global
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      # Log info
      - --log=true
      # - --log.filePath=/var/log/traefik/traefik.log
      - --log.level=DEBUG # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      # Access logs
      - --accesslog=true
      # - --accesslog.filepath=/var/log/traefik/access.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=204-299,400-499,500-599
      - --accesslog.fields.headers.names.Content-Type=keep
      - --accesslog.fields.headers.names.Referer=keep
      - --accesslog.fields.headers.names.User-Agent=keep
      # Enable the Trafik dashboard
      - --api=true
      - --api.dashboard=true
      - --api.insecure=false
      - --api.debug=true
      # Tell Traefik to discover containers using the Docker API
      - --providers.docker
      - --providers.docker.exposedbydefault=false
      # - --providers.docker.endpoint=unix://var/run/docker.sock # Use Docker Socket Proxy instead for improved security
      - --providers.docker.endpoint=tcp://socket-proxy:2375
      - --providers.docker.network=traefik-net
      - --providers.docker.swarmMode=false
      - --providers.file.directory=/data/rules # Load dynamic configuration from one or more .toml or .yml files in a directory
      - --providers.file.watch=true # Only works on top level files in the rules folder
      # Set up an insecure listener that redirects all traffic to TLS
      - --entrypoints.web.address=:80
      # - --entrypoints.web.http.redirections.entrypoint.to=websecure
      # - --entrypoints.web.http.redirections.entrypoint.scheme=https
      # # Set up the TLS configuration for our https listener
      # - --entrypoints.websecure.address=:443
      # - --entrypoints.websecure.http.tls.domains[0].main=${DNS_DOMAIN}
      # - --entrypoints.websecure.http.tls.domains[0].sans=*.${DNS_DOMAIN}
      # - --entrypoints.websecure.http.tls.domains[1].main=${OTHER_DOMAIN}
      # - --entrypoints.websecure.http.tls.domains[1].sans=*.${OTHER_DOMAIN}
      # - --entrypoints.websecure.http.tls.domains[2].main=tripsit.me
      # - --entrypoints.websecure.http.tls.domains[2].sans=*.tripsit.me
      # - --entrypoints.websecure.http.tls.options=intermediate@file
      # - --entrypoints.websecure.forwardedHeaders.trustedIPs=$CLOUDFLARE_IPS,$LOCAL_IPS

      # # Set up LetsEncrypt for Cloudflare
      # # - --certificatesResolvers.letsencrypt.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory 
      # - --certificatesresolvers.letsencrypt.acme.dnschallenge=true
      # - --certificatesresolvers.letsencrypt.acme.dnschallenge.provider=cloudflare
      # - --certificatesresolvers.letsencrypt.acme.email=${LETSENCRYPT_EMAIL}
      # - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
      # - --certificatesresolvers.letsencrypt.acme.dnschallenge.resolvers==1.1.1.1:53,1.0.0.1:53
      # - --certificatesresolvers.letsencrypt.acme.dnschallenge.disablepropagationcheck=true

      # # Set up LetsEncrypt for Namecheap, our legacy provider
      # # - --certificatesResolvers.letsencrypt-legacy.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory 
      # - --certificatesresolvers.letsencrypt-legacy.acme.dnschallenge=true
      # - --certificatesresolvers.letsencrypt-legacy.acme.dnschallenge.provider=namecheap
      # - --certificatesresolvers.letsencrypt-legacy.acme.email=${LETSENCRYPT_EMAIL}
      # - --certificatesresolvers.letsencrypt-legacy.acme.storage=/letsencrypt/acme-legacy.json
      # # - --certificatesresolvers.letsencrypt-legacy.acme.dnschallenge.disablepropagationcheck=true

volumes:
  portainer-data:
    name: portainer-data
  traefik-data:
    name: traefik-data

########################### NETWORKS
networks:
  database_api-net:
    name: database_api-net
  database_pgadmin-net:
    name: database_pgadmin-net
  portainer-net:
    name: portainer-net
  socket-net:
    name: socket-net
  traefik-net:
    name: traefik-net