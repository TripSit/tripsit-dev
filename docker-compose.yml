version: '3.9'

########################### EXTENSION FIELDS
# Common environment values
x-environment: &default-tz-puid-pgid
  TZ: $TZ
  PUID: $PUID
  PGID: $PGID
 
# Keys common to some of the core services that we always to automatically restart on failure
x-common-keys-core: &common-keys-core
  security_opt:
    - no-new-privileges:true
  restart: always

# Keys common to some of the dependent services/apps
x-common-keys-apps: &common-keys-apps
  security_opt:
    - no-new-privileges:true
  restart: unless-stopped

########################### SERVICES
services:
  # Core
  traefik:
    <<: *common-keys-core
    image: traefik:latest
    container_name: traefik
    profiles: ["core", "all"]
    # depends_on: 
    #   - docker-socket-proxy
    command:
      # Global
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      # Log info
      - --log=true
      # - --log.filePath=/var/log/traefik/traefik.log
      - --log.level=DEBUG # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      # Access logs
      - --accesslog=true
      # - --accesslog.filepath=/var/log/traefik/access.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=204-299,400-499,500-599
      - --accesslog.fields.headers.names.Content-Type=keep
      - --accesslog.fields.headers.names.Referer=keep
      - --accesslog.fields.headers.names.User-Agent=keep
      # Enable the Trafik dashboard
      - --api=true
      - --api.dashboard=true
      - --api.insecure=false
      - --api.debug=true
      # Tell Traefik to discover containers using the Docker API
      - --providers.docker
      - --providers.docker.exposedbydefault=false
      # - --providers.docker.endpoint=unix://var/run/docker.sock # Use Docker Socket Proxy instead for improved security
      - --providers.docker.endpoint=tcp://socket-proxy:2375
      - --providers.docker.network=traefik-net
      - --providers.docker.swarmMode=false
      - --providers.file.directory=/data/rules # Load dynamic configuration from one or more .toml or .yml files in a directory
      - --providers.file.watch=true # Only works on top level files in the rules folder
      # Set up an insecure listener that redirects all traffic to TLS
      - --entrypoints.web.address=:80
      # - --entrypoints.web.http.redirections.entrypoint.to=websecure
      # - --entrypoints.web.http.redirections.entrypoint.scheme=https
      # # Set up the TLS configuration for our https listener
      # - --entrypoints.websecure.address=:443
      # - --entrypoints.websecure.http.tls=true
      # - --entrypoints.websecure.http.tls.certResolver=letsencrypt
      # - --entrypoints.websecure.http.tls.domains[0].main=${DNS_DOMAIN}
      # - --entrypoints.websecure.http.tls.domains[0].sans=*.${DNS_DOMAIN}
      # - --entrypoints.websecure.http.tls.domains[1].main=${OTHER_DOMAIN}
      # - --entrypoints.websecure.http.tls.domains[1].sans=*.${OTHER_DOMAIN}
      # - --entrypoints.websecure.http.tls.options=tls-opts@file
      # - --entrypoints.websecure.forwardedHeaders.trustedIPs=$CLOUDFLARE_IPS,$LOCAL_IPS
      # # Set up LetsEncrypt
      # # - --certificatesResolvers.letsencrypt.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory 
      # - --certificatesresolvers.letsencrypt.acme.dnschallenge=true
      # - --certificatesresolvers.letsencrypt.acme.dnschallenge.provider=cloudflare
      # - --certificatesresolvers.letsencrypt.acme.email=${LETSENCRYPT_EMAIL}
      # - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
      # - --certificatesresolvers.letsencrypt.acme.dnschallenge.resolvers==1.1.1.1:53,1.0.0.1:53
      # - --certificatesresolvers.letsencrypt.acme.dnschallenge.disablepropagationcheck=true
    environment:
      - DOCKER_HOST=tcp://socket-proxy:2375
      - DOMAINNAME_CLOUD_SERVER=${DNS_DOMAIN}
    ports:
      - 80:80
      # - 443:443
    volumes:
      # - /var/run/docker.sock:/var/run/docker.sock
      - ${DOCKERDIR}/appdata/traefik/data/:/data
      - ${DOCKERDIR}/logs/traefik:/var/log/traefik
      # - ${LOCAL_MOUNT}/traefik/letsencrypt:/letsencrypt
      - /etc/traefik:/etc/traefik
    networks:
      tripbot-net:
      traefik-net:
      portainer-net:
      socket-net:
      database_frontend-net:
    labels:
      # - com.centurylinklabs.watchtower.enable=true
      - traefik.enable=true
      - traefik.http.routers.traefik-rtr.service=api@internal
      - traefik.http.routers.traefik-rtr.rule=Host(`traefik.${DNS_DOMAIN}`)
      - traefik.http.routers.traefik-rtr.entrypoints=web
  portainer:
    <<: *common-keys-apps
    image: portainer/portainer-ce:latest
    container_name: portainer
    profiles: ["apps", "admin", "all"]
    command: -H tcp://socket-proxy:2375
    # command: -H unix://var/run/docker.sock
    # depends_on: 
    #   - docker-socket-proxy
    networks:
      socket-net:
      portainer-net:
    volumes:
      # - /var/run/docker.sock:/var/run/docker.sock
      - portainer-data:/data
    environment:
      <<: *default-tz-puid-pgid
      DOCKER_HOST: tcp://socket-proxy:2375
    labels:
      # - com.centurylinklabs.watchtower.enable=true
      - traefik.enable=true
      - traefik.docker.network=portainer-net
      - traefik.http.services.portainer-svc.loadbalancer.server.port=9000
      - traefik.http.routers.portainer-rtr.rule=Host(`portainer.${DNS_DOMAIN}`)
      - traefik.http.routers.portainer-rtr.entrypoints=web
      - traefik.http.routers.portainer-rtr.service=portainer-svc
  docker-socket-proxy:
    <<: *common-keys-core
    image: tecnativa/docker-socket-proxy
    container_name: socket-proxy
    profiles: ["core", "all"]
    networks:
    - socket-net
    # ports:
    #   - "127.0.0.1:2375:2375" # Port 2375 should only ever get exposed to the internal network. When possible use this line.
    # I use the next line instead, as I want portainer to manage multiple docker endpoints within my home network.
    # - "2375:2375"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      <<: *default-tz-puid-pgid
      LOG_LEVEL: info # debug,info,notice,warning,err,crit,alert,emerg
      ## Variables match the URL prefix (i.e. AUTH blocks access to /auth/* parts of the API, etc.).
      # 0 to revoke access.
      # 1 to grant access.
      ## Granted by Default
      EVENTS: 1
      PING: 1
      VERSION: 1
      ## Revoked by Default
      # Security critical
      AUTH: 0
      SECRETS: 0
      POST: 0
      # Not always needed
      BUILD: 0
      COMMIT: 0
      CONFIGS: 0
      CONTAINERS: 1 # Traefik, portainer, etc.
      DISTRIBUTION: 0
      EXEC: 0
      IMAGES: 1 # Portainer
      INFO: 1 # Portainer
      NETWORKS: 1 # Portainer
      NODES: 0
      PLUGINS: 0
      SERVICES: 1 # Portainer
      SESSION: 0
      SWARM: 0
      SYSTEM: 0
      TASKS: 1 # Portainer
      VOLUMES: 1 # Portainer
    labels:
      # - com.centurylinklabs.watchtower.enable=true
      - traefik.enable=false



########################### NETWORKS
networks:
  portainer-net:
    name: portainer-net
  socket-net:
    name: socket-net
  traefik-net:
    name: traefik-net
  tripbot-net:
    name: tripbot-net
  database_frontend-net:
    name: database_frontend-net
  database_backend-net:
    name: database_backend-net

########################### VOLUMES
volumes:
  portainer-data:
    name: portainer-data
  tripbot-data:
    name: tripbot-data
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: './repos/tripbot/'
  tripbot_website-data:
    name: tripbot_website-data
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: './repos/tripbot_website/'

  database-data:
    name: database-data
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: './repos/database/'

  database_frontend-data:
    name: database_frontend-data
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: './repos/database_frontend/'

  database_backend-data:
    name: database_backend-data
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: './repos/database_backend/'

#### Notes

  # # Tripbot
  # tripbot:
  #   <<: *common-keys-apps
  #   build:
  #     context: https://github.com/tripsit/tripbot.git#Docker-update
  #     dockerfile: ./Dockerfile
  #     # Only will build development stage from our dockerfile
  #     target: development
  #   container_name: tripbot
  #   profiles: ["apps", "tripbot", "all"]
  #   volumes:
  #     - tripbot-data:/usr/src/app/ # Needed for hot-reloading of source code
  #     - /etc/timezone:/etc/timezone:ro
  #     - /etc/localtime:/etc/localtime:ro
  #   working_dir: /usr/src/app
  #   env_file:
  #     - .env
  #   environment:
  #     <<: *default-tz-puid-pgid
  #   networks:
  #       - tripbot-net
  #   # Run a command against the development stage of the image
  #   command: npx tsc-watch --onSuccess "npx nodemon --config ./nodemon.json"
  #   labels:
  #   # - com.centurylinklabs.watchtower.enable=true
  #   - traefik.enable=false
  # tripbot_website:
  #   <<: *common-keys-apps
  #   # build: https://github.com/tripsit/tripbot-website.git
  #   build:
  #     context: https://github.com/tripsit/tripbot-website.git
  #     dockerfile: ./Dockerfile
  #     # Only will build development stage from our dockerfile
  #     target: development
  #   container_name: tripbot_website
  #   profiles: ["apps", "tripbot", "all"]
  #   volumes:
  #     - tripbot_website-data:/usr/src/app/ # Needed for hot-reloading of source code
  #     - /etc/timezone:/etc/timezone:ro
  #     - /etc/localtime:/etc/localtime:ro
  #   working_dir: /usr/src/app
  #   ports:
  #     - "8080:8080"
  #   env_file:
  #     - .env
  #   environment:
  #     <<: *default-tz-puid-pgid
  #     TZ: America/Chicago
  #   networks:
  #     - tripbot-net
  #   labels:
  #   # - com.centurylinklabs.watchtower.enable=true
  #   - traefik.enable=true
  #   - traefik.docker.network=tripbot-net
  #   - traefik.http.services.tripbot_website-svc.loadbalancer.server.port=5173
  #   - traefik.http.routers.tripbot_website-rtr.rule=Host(`tripbot.${DNS_DOMAIN}`)
  #   - traefik.http.routers.tripbot_website-rtr.entrypoints=web
  #   - traefik.http.routers.tripbot_website-rtr.service=tripbot_website-svc
  #   command: npx vite --host
  # database:
  #   <<: *common-keys-apps
  #   build:
  #     context: https://github.com/TripSit/database-admin.git
  #     dockerfile: ./Dockerfile-postgres
  #   container_name: database
  #   profiles: ["apps", "database", "all"]
  #   volumes:
  #     - database-data:/var/lib/postgresql/data
  #   # ports:
  #   #   - 5432:5432  # enables connecting locally via psql
  #   networks:
  #       - database_backend-net
  #   environment:
  #     <<: *default-tz-puid-pgid
  #     POSTGRES_USER: tripsit
  #     POSTGRES_DB: tripsit
  #     POSTGRES_PASSWORD: SuperSecure123
  #     POSTGRES_HOST_AUTH_METHOD: trust
  #   labels:
  #     # - com.centurylinklabs.watchtower.enable=true
  #     - traefik.enable=false
  # database_frontend:
  #   <<: *common-keys-apps
  #   build:
  #     context: https://github.com/TripSit/database-admin.git
  #     dockerfile: ./Dockerfile-pgadmin
  #   container_name: database_frontend
  #   profiles: ["apps", "database", "all"]
  #   depends_on:
  #     - database
  #   # ports:
  #   #     - 8081:80
  #   networks:
  #       - database_frontend-net
  #       - database_backend-net
  #   volumes:
  #     - database_frontend-data:/var/lib/pgadmin
  #     - /etc/timezone:/etc/timezone:ro
  #     - /etc/localtime:/etc/localtime:ro
  #   environment:
  #     <<: *default-tz-puid-pgid
  #     TZ: America/Chicago
  #     PGADMIN_DEFAULT_EMAIL: user@tripsit.me
  #     PGADMIN_DEFAULT_PASSWORD: SuperSecret123
  #   labels:
  #   # - com.centurylinklabs.watchtower.enable=true
  #   - traefik.enable=true
  #   - traefik.docker.network=database_frontend-net
  #   - traefik.http.services.database_frontend-svc.loadbalancer.server.port=80
  #   - traefik.http.routers.database_frontend-rtr.rule=Host(`database.${DNS_DOMAIN}`)
  #   - traefik.http.routers.database_frontend-rtr.entrypoints=web
  #   - traefik.http.routers.database_frontend-rtr.service=database_frontend-svc
  # database_backend:
  #   <<: *common-keys-apps
  #   build:
  #     context: https://github.com/TripSit/database-admin.git
  #     dockerfile: ./Dockerfile
  #     # Only will build development stage from our dockerfile
  #     target: development
  #   container_name: database_backend
  #   profiles: ["apps", "database", "all"]
  #   depends_on:
  #     - database
  #   command: npm run start
  #   # ports:
  #   #   - 5000:5000
  #   #   - 9229:9229
  #   networks:
  #     - database_frontend-net
  #     - database_backend-net
  #   volumes:
  #     - database_backend-data:/usr/src/app
  #     # - ./src/scripts/init-db.sh:/docker-entrypoint-initdb.d/initialize-database.sh
  #     - /usr/src/app/node_modules
  #   environment:
  #     <<: *default-tz-puid-pgid
  #     PORT: 5000
  #     TZ: America/Chicago
  #     DATABASE_URL: postgres://tripsit:SuperSecure123@database/tripsit
  #   labels:
  #     # - com.centurylinklabs.watchtower.enable=true
  #     - traefik.enable=true
  #     - traefik.docker.network=database_backend-net
  #     - traefik.http.services.database_backend-svc.loadbalancer.server.port=5000
  #     - traefik.http.routers.database_backend-rtr.rule=Host(`api.${DNS_DOMAIN}`)
  #     - traefik.http.routers.database_backend-rtr.entrypoints=web
  #     - traefik.http.routers.database_backend-rtr.service=database_backend-svc

  # Barman
  # barman:
  #   <<: *common-keys-apps
  #   image: ubcctlt/barman
  #   # https://hub.docker.com/r/ubcctlt/barman
  #   container_name: barman
  #   profiles: ["apps", "barman", "all"]
  #   volumes:
  #     - ${DOCKERDIR}/barman/cron.d:/etc/cron.d
  #     - ${DOCKERDIR}/barman/creds:/etc/creds
  #     # Barman configs
  #     # - ${DOCKERDIR}/barman/config/barman.conf:/etc/barman.conf
  #     # - ${DOCKERDIR}/barman/config/barman.d:/etc/barman/barman.d
  #     # cron job for taking weekly basebackups
  #     # - ./basebackups.cron:/etc/cron.d/basebackups:ro
  #     # The right side of this mount should be set to BARMAN_DATA_DIR.
  #     # - ${DOCKERDIR}/appdata/barman/:/var/lib/barman
  #     # The right side of this mount should be set to BARMAN_LOG_DIR.
  #     - ${DOCKERDIR}/logs/barman:/var/log/barman
  #     # Password file
  #     # - ${DOCKERDIR}/barman/pgpass:/private/pgpass:ro

  #   networks:
  #       - tripbot-net
  #   environment:
  #     <<: *default-tz-puid-pgid
  #     # DOCKER_HOST: tcp://socket-proxy:2375
  #     BARMAN_CRON_SRC: /etc/cron.d
  #     # BARMAN_LOG_DIR: /var/log/barman
  #     # BARMAN_SSH_KEY_DIR: /private/ssh
  #     # BARMAN_PGPASSFILE: /private/pgpass
  #     BARMAN_CRON_SCHEDULE: "* * * * *"
  #     # BARMAN_BACKUP_SCHEDULE: 0 4 * * * # Every day at 4 am
  #     BARMAN_BACKUP_SCHEDULE: "0 * * * *" # Every hour
  #     # BARMAN_LOG_LEVEL: INFO
  #     DB_HOST: database
  #     DB_PORT: 5432
  #     DB_SUPERUSER: barman
  #     DB_SUPERUSER_PASSWORD: ${BARMAN_PASSWORD}
  #     DB_SUPERUSER_DATABASE: tripsit
  #     DB_REPLICATION_USER: streaming_barman
  #     DB_REPLICATION_PASSWORD: ${BARMAN_STREAMING_PASSWORD}
  #     DB_SLOT_NAME: barman
  #     DB_BACKUP_METHOD: postgres
  #     GOOGLE_APPLICATION_CREDENTIALS: /etc/creds/gcloud.json

  #   labels:
  #     # - com.centurylinklabs.watchtower.enable=true
  #     - traefik.enable=false