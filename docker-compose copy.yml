version: '3.9'

name: tripsit-live

########################### EXTENSION FIELDS
# Common environment values
x-environment: &default-tz-puid-pgid
  TZ: $TZ
  PUID: $PUID
  PGID: $PGID
 
# Keys common to some of the core services that we always to automatically restart on failure
x-common-keys-core: &common-keys-core
  security_opt:
    - no-new-privileges:true
  restart: always

# Keys common to some of the dependent services/apps
x-common-keys-apps: &common-keys-apps
  security_opt:
    - no-new-privileges:true
  restart: unless-stopped

########################### SERVICES
services:
  # Core
  traefik:
    <<: *common-keys-core
    image: traefik:latest
    container_name: traefik
    profiles: ["core", "all"]
    # depends_on: 
    #   - docker-socket-proxy
    command:
      # Global
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      # Log info
      - --log=true
      # - --log.filePath=/var/log/traefik/traefik.log
      - --log.level=DEBUG # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      # Access logs
      - --accesslog=true
      # - --accesslog.filepath=/var/log/traefik/access.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=204-299,400-499,500-599
      - --accesslog.fields.headers.names.Content-Type=keep
      - --accesslog.fields.headers.names.Referer=keep
      - --accesslog.fields.headers.names.User-Agent=keep
      # Enable the Trafik dashboard
      - --api=true
      - --api.dashboard=true
      - --api.insecure=false
      - --api.debug=true
      # Tell Traefik to discover containers using the Docker API
      - --providers.docker
      - --providers.docker.exposedbydefault=false
      # - --providers.docker.endpoint=unix://var/run/docker.sock # Use Docker Socket Proxy instead for improved security
      - --providers.docker.endpoint=tcp://socket-proxy:2375
      - --providers.docker.network=traefik-net
      - --providers.docker.swarmMode=false
      - --providers.file.directory=/data/rules # Load dynamic configuration from one or more .toml or .yml files in a directory
      - --providers.file.watch=true # Only works on top level files in the rules folder
      # Set up an insecure listener that redirects all traffic to TLS
      - --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      # Set up the TLS configuration for our https listener
      - --entrypoints.websecure.address=:443
      - --entrypoints.websecure.http.tls=true
      - --entrypoints.websecure.http.tls.certResolver=letsencrypt
      - --entrypoints.websecure.http.tls.domains[0].main=${DNS_DOMAIN}
      - --entrypoints.websecure.http.tls.domains[0].sans=*.${DNS_DOMAIN}
      - --entrypoints.websecure.http.tls.domains[1].main=${OTHER_DOMAIN}
      - --entrypoints.websecure.http.tls.domains[1].sans=*.${OTHER_DOMAIN}
      - --entrypoints.websecure.http.tls.options=tls-opts@file
      - --entrypoints.websecure.forwardedHeaders.trustedIPs=$CLOUDFLARE_IPS,$LOCAL_IPS
      # Set up LetsEncrypt
      # - --certificatesResolvers.letsencrypt.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory 
      - --certificatesresolvers.letsencrypt.acme.dnschallenge=true
      - --certificatesresolvers.letsencrypt.acme.dnschallenge.provider=cloudflare
      - --certificatesresolvers.letsencrypt.acme.email=${LETSENCRYPT_EMAIL}
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.letsencrypt.acme.dnschallenge.resolvers==1.1.1.1:53,1.0.0.1:53
      - --certificatesresolvers.letsencrypt.acme.dnschallenge.disablepropagationcheck=true
    environment:
      - DOCKER_HOST=tcp://socket-proxy:2375
      - DOMAINNAME_CLOUD_SERVER=${DNS_DOMAIN}
      - CF_API_EMAIL=${CF_EMAIL}
      - CF_API_KEY=${CF_API_KEY}
    ports:
      - 80:80
      - 443:443
    volumes:
      - ${DOCKERDIR}/traefik/:/data
      - ${DOCKERDIR}/logs/traefik:/var/log/traefik
      - ${LOCAL_MOUNT}/traefik/letsencrypt:/letsencrypt
      - /etc/traefik:/etc/traefik
    networks:
      dozzle-net:
      duplicati-net:
      database_frontend-net:
      database_backend-net:
      drone-net:
      files-net:
      gotify-net:
      gitlab-net:
      it-net:
      kuma-net:
      lounge-vip-net:
      lounge-net:
      mail-net:
      matrix-net:
      monica-net:
      netdata-net:
      nginx-net:
      oauth-net:
      organizr-net:
      portainer-net:
      postgres-net:
      privatebin-net:
      speedtest-net:
      socket-net:
      trilium-net:
      tripbot-net:
      traefik-net:
    labels:
      - com.centurylinklabs.watchtower.enable=true
      - traefik.enable=true
      - traefik.http.routers.traefik-rtr.service=api@internal
      - traefik.http.routers.traefik-rtr.rule=Host(`traefik.${DNS_DOMAIN}`)
      - traefik.http.routers.traefik-rtr.entrypoints=websecure
      - traefik.http.routers.traefik-rtr.tls.certresolver=letsencrypt
      - traefik.http.routers.traefik-rtr.tls.domains[0].main=${DNS_DOMAIN}
      - traefik.http.routers.traefik-rtr.tls.domains[0].sans=*.${DNS_DOMAIN}
      - traefik.http.routers.traefik-rtr.tls.domains[1].main=${OTHER_DOMAIN}
      - traefik.http.routers.traefik-rtr.tls.domains[1].sans=*.${OTHER_DOMAIN}
      - traefik.http.routers.traefik-rtr.middlewares=middlewares-traefik-strip@file,chain-no-auth@file
  portainer:
    <<: *common-keys-core
    image: portainer/portainer-ce:latest
    container_name: portainer
    profiles: ["core", "admin", "all"]
    command: -H tcp://socket-proxy:2375
    # depends_on: 
    #   - docker-socket-proxy
    networks:
      socket-net:
      portainer-net:
    volumes:
      - ${DOCKERDIR}/appdata/portainer/data/:/data
    environment:
      <<: *default-tz-puid-pgid
      DOCKER_HOST: tcp://socket-proxy:2375
    labels:
      - com.centurylinklabs.watchtower.enable=true
      - traefik.enable=true
      - traefik.docker.network=portainer-net
      - traefik.http.services.portainer-svc.loadbalancer.server.port=9000
      - traefik.http.routers.portainer-rtr.rule=Host(`portainer.${DNS_DOMAIN}`)
      - traefik.http.routers.portainer-rtr.service=portainer-svc
      - traefik.http.routers.portainer-rtr.entrypoints=websecure
      - traefik.http.routers.portainer-rtr.tls=true
      - traefik.http.routers.portainer-rtr.middlewares=chain-no-auth@file
  docker-socket-proxy:
    <<: *common-keys-core
    image: tecnativa/docker-socket-proxy
    container_name: socket-proxy
    profiles: ["core", "all"]
    networks:
    - socket-net
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      <<: *default-tz-puid-pgid
      LOG_LEVEL: info # debug,info,notice,warning,err,crit,alert,emerg
      ## Variables match the URL prefix (i.e. AUTH blocks access to /auth/* parts of the API, etc.).
      # 0 to revoke access.
      # 1 to grant access.
      ## Granted by Default
      EVENTS: 1
      PING: 1
      VERSION: 1
      ## Revoked by Default
      # Security critical
      AUTH: 0
      SECRETS: 0
      POST: 1 # Watchtower
      # Not always needed
      BUILD: 1 # Drone
      COMMIT: 0
      CONFIGS: 0
      CONTAINERS: 1 # Traefik, portainer, etc.
      DISTRIBUTION: 0
      EXEC: 0
      IMAGES: 1 # Portainer
      INFO: 1 # Portainer
      NETWORKS: 1 # Portainer
      NODES: 0
      PLUGINS: 0
      SERVICES: 1 # Portainer
      SESSION: 0
      SWARM: 0
      SYSTEM: 0
      TASKS: 1 # Portainer
      VOLUMES: 1 # Portainer
    labels:
      - com.centurylinklabs.watchtower.enable=true
      - traefik.enable=false
  fail2ban:
    <<: *common-keys-core
    image: crazymax/fail2ban:latest
    container_name: fail2ban
    profiles: ["core", "all"]
    volumes:
      - ${DOCKERDIR}/appdata/fail2ban/log:/var/log:ro
      - ${DOCKERDIR}/appdata/fail2ban/data:/data
    environment:
      <<: *default-tz-puid-pgid
    network_mode: host
    cap_add:
    - NET_ADMIN
    - NET_RAW
    labels:
      - com.centurylinklabs.watchtower.enable=true
      - traefik.enable=false

  # Admin
  dozzle:
    <<: *common-keys-apps
    image: amir20/dozzle:latest
    container_name: dozzle
    profiles: ["apps", "admin", "all"]
    depends_on: 
      - docker-socket-proxy
    networks:
      dozzle-net:
      socket-net:
    environment:
      <<: *default-tz-puid-pgid
      DOCKER_HOST: tcp://socket-proxy:2375
      DOZZLE_LEVEL: info
      DOZZLE_TAILSIZE: 300
      DOZZLE_FILTER: "status=running"
    labels:
      - com.centurylinklabs.watchtower.enable=true
      - traefik.enable=true
      - traefik.docker.network=dozzle-net
      - traefik.http.services.dozzle-svc.loadbalancer.server.port=8080
      - traefik.http.routers.dozzle-rtr.rule=Host(`logs.${DNS_DOMAIN}`)
      - traefik.http.routers.dozzle-rtr.entrypoints=websecure
      - traefik.http.routers.dozzle-rtr.tls=true
      - traefik.http.routers.dozzle-rtr.service=dozzle-svc
      - traefik.http.routers.dozzle-rtr.middlewares=chain-basic-auth@file
  netdata:
    <<: *common-keys-apps
    image: netdata/netdata
    # user: ${PUID:-1000}
    container_name: netdata
    profiles: ["apps", "admin", "all"]
    depends_on: 
      - docker-socket-proxy
    hostname: "core.${DNS_DOMAIN}"
    cap_add:
      - SYS_PTRACE
    security_opt:
      - apparmor:unconfined
    # secrets:
    #   - netdata_claim_token
    #   - netdata_claim_rooms
    environment:
      <<: *default-tz-puid-pgid
      DOCKER_HOST: tcp://socket-proxy:2375
    #   - NETDATA_CLAIM_TOKEN=/run/secrets/netdata_claim_token
    #   - NETDATA_CLAIM_URL=https://app.netdata.cloud
    #   - NETDATA_CLAIM_ROOMS=/run/secrets/netdata_claim_rooms
    networks:
      - socket-net
      - netdata-net
    volumes:
      # - /var/run/docker.sock:/var/run/docker.sock
      - netdata-config:/etc/netdata
      - netdata-lib:/var/lib/netdata
      - netdata-cache:/var/cache/netdata
      - /etc/passwd:/host/etc/passwd:ro
      - /etc/group:/host/etc/group:ro
      - /sys:/host/sys:ro
      - /etc/os-release:/host/etc/os-release:ro
    labels:
      - com.centurylinklabs.watchtower.enable=true
      - traefik.enable=true
      - traefik.docker.network=netdata-net
      - traefik.http.services.netdata-svc.loadbalancer.server.port=19999
      - traefik.http.routers.netdata-rtr.rule=Host(`netdata.${DNS_DOMAIN}`)
      - traefik.http.routers.netdata-rtr.entrypoints=websecure
      - traefik.http.routers.netdata-rtr.service=netdata-svc
      - traefik.http.routers.netdata-rtr.tls=true
      - traefik.http.routers.netdata-rtr.middlewares=chain-basic-auth@file
  duplicati:
    <<: *common-keys-apps
    image: ghcr.io/linuxserver/duplicati:latest
    # image: duplicati/duplicati
    container_name: duplicati
    profiles: ["apps", "admin", "all"]
    networks:
      - duplicati-net
    environment:
      - TZ=${TIME_ZONE}
      - PUID=0
      - PGID=0
    volumes:
      - ${DOCKERDIR}/appdata/duplicati/data:/app/data
      - ${DOCKERDIR}:/sources/docker
      - /home/moonbear/:/sources/moonbear
    labels:
      - com.centurylinklabs.watchtower.enable=true
      - traefik.enable=true
      - traefik.docker.network=duplicati-net
      - traefik.http.services.duplicati-svc.loadbalancer.server.port=8200
      - traefik.http.routers.duplicati-rtr.rule=Host(`backups.${DNS_DOMAIN}`)
      - traefik.http.routers.duplicati-rtr.entrypoints=websecure
      - traefik.http.routers.duplicati-rtr.service=duplicati-svc
      - traefik.http.routers.duplicati-rtr.tls=true
      - traefik.http.routers.duplicati-rtr.middlewares=chain-basic-auth@file
  it-tools:
    <<: *common-keys-apps
    image: corentinth/it-tools
    container_name: tools
    profiles: ["apps", "admin", "all"]
    networks:
      - it-net
    labels:
      - com.centurylinklabs.watchtower.enable=true
      - traefik.enable=true
      - traefik.docker.network=it-net
      - traefik.http.services.tools-svc.loadbalancer.server.port=80
      - traefik.http.routers.tools-rtr.rule=Host(`tools.${DNS_DOMAIN}`)
      - traefik.http.routers.tools-rtr.entrypoints=websecure
      - traefik.http.routers.tools-rtr.tls=true
      - traefik.http.routers.tools-rtr.service=tools-svc
      - traefik.http.routers.tools-rtr.middlewares=chain-basic-auth@file
  uptime-kuma:
    <<: *common-keys-core
    image: louislam/uptime-kuma
    container_name: kuma
    profiles: ["apps", "admin", "all"]
    depends_on: 
      - docker-socket-proxy
    environment:
      <<: *default-tz-puid-pgid
      DOCKER_HOST: tcp://socket-proxy:2375
    networks:
      - kuma-net
      - socket-net
      - database-net
    volumes:
      - ${DOCKERDIR}/appdata/uptime-kuma/data:/app/data
    labels:
      - com.centurylinklabs.watchtower.enable=true
      - traefik.enable=true
      - traefik.docker.network=kuma-net
      - traefik.http.services.kuma-svc.loadbalancer.server.port=3001
      - traefik.http.routers.kuma-rtr.rule=Host(`uptime.${DNS_DOMAIN}`)
      - traefik.http.routers.kuma-rtr.entrypoints=websecure
      - traefik.http.routers.kuma-rtr.tls=true
      - traefik.http.routers.kuma-rtr.service=kuma-svc
      - traefik.http.routers.kuma-rtr.middlewares=chain-basic-auth@file
  filebrowser:
    <<: *common-keys-apps
    image: filebrowser/filebrowser:s6
    container_name: files
    profiles: ["apps", "admin", "all"]
    networks:
      - files-net
    volumes:
      - ${DOCKERDIR}/appdata/filebrowser/data:/app/data
      - ${DOCKERDIR}/appdata/filebrowser/config:/config
      - ${USERDIR}:/data/home
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - com.centurylinklabs.watchtower.enable=true
      - traefik.enable=true
      - traefik.docker.network=files-net
      - traefik.http.services.filebrowser-svc.loadbalancer.server.port=80
      - traefik.http.routers.filebrowser-rtr.rule=Host(`files.${DNS_DOMAIN}`)
      - traefik.http.routers.filebrowser-rtr.entrypoints=websecure
      - traefik.http.routers.filebrowser-rtr.tls=true
      - traefik.http.routers.filebrowser-rtr.service=filebrowser-svc
      - traefik.http.routers.filebrowser-rtr.middlewares=chain-basic-auth@file
  gotify:
    <<: *common-keys-apps
    image: gotify/server
    container_name: gotify
    profiles: ["apps", "admin", "all"]
    volumes:
      - ${DOCKERDIR}/appdata/gotify/data:/app/data
    environment:
      <<: *default-tz-puid-pgid
    networks:
      - gotify-net
    labels:
      - com.centurylinklabs.watchtower.enable=true
      - traefik.enable=true
      - traefik.docker.network=gotify-net
      - traefik.http.services.gotify-svc.loadbalancer.server.port=80
      - traefik.http.routers.gotify-rtr.rule=Host(`alerts.${DNS_DOMAIN}`)
      - traefik.http.routers.gotify-rtr.entrypoints=websecure
      - traefik.http.routers.gotify-rtr.tls=true
      - traefik.http.routers.gotify-rtr.service=gotify-svc
      - traefik.http.routers.gotify-rtr.middlewares=chain-no-auth@file

  # Backend
  traefik-cloudflare-companion:
    <<: *common-keys-apps
    image: tiredofit/traefik-cloudflare-companion:latest
    container_name: cf_companion
    profiles: ["apps", "backend", "all"]
    networks:
      - socket-net
    # secrets:
    # - cloudflare_email
    # - cloudflare_api_key
    depends_on: 
      - docker-socket-proxy
    environment:
      <<: *default-tz-puid-pgid
      DOCKER_HOST: tcp://socket-proxy:2375
      TIMEZONE: $TZ
      TRAEFIK_VERSION: 2
      CF_EMAIL: $CF_EMAIL
      CF_TOKEN: $CF_API_KEY
      # CF_EMAIL_FILE: /run/secrets/cloudflare_email Doesnt work for some reason
      # CF_TOKEN_FILE: /run/secrets/cloudflare_api_key Doesnt work for some reason
      TARGET_DOMAIN: $DNS_DOMAIN
      DOMAIN1: $DNS_DOMAIN
      DOMAIN1_ZONE_ID: $DNS_DOMAIN_ZONE_ID
      DOMAIN1_PROXIED: TRUE
    labels:
      - com.centurylinklabs.watchtower.enable=true
      - traefik.enable=false
  watchtower:
    <<: *common-keys-apps
    image: containrrr/watchtower
    container_name: watchtower
    profiles: ["apps", "backend", "all"]
    networks:
      - socket-net
    depends_on: 
      - docker-socket-proxy
    environment:
      <<: *default-tz-puid-pgid
      DOCKER_HOST: tcp://socket-proxy:2375
      WATCHTOWER_CLEANUP: "true"
      WATCHTOWER_REMOVE_VOLUMES: "true"
      WATCHTOWER_INCLUDE_STOPPED: "true"
      WATCHTOWER_NO_STARTUP_MESSAGE: "false"
      WATCHTOWER_SCHEDULE: "0 30 12 * * *"
      DOCKER_API_VERSION: "1.40"
    labels:
      - com.centurylinklabs.watchtower.enable=true
      - traefik.enable=false 

  # Wordpress
  nginx:
    <<: *common-keys-apps
    image: nginx:1.18
    container_name: nginx
    profiles: ["apps", "backend", "wordpress", "all"]
    depends_on:
      - php7
      - mariadb-wordpress
    networks:
      - nginx-net
      - nginx-private-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /var/log/nginx:/var/log/nginx
      - ${DOCKERDIR}/nginx:/etc/nginx
      #- ${DOCKERDIR}/shared/.htpassd:/shared/.htpasswd
      - ${DOCKERDIR}/sites/wordpress:/var/www/html/wordpress
      # - ${DOCKERDIR}/sites/shb/html:/var/www/html/shb
      # - ${DOCKERDIR}/sites/khub/html:/var/www/html/khub
      # - ${DOCKERDIR}/sites/dash/html:/var/www/html/dash
    labels:
      - com.centurylinklabs.watchtower.enable=false
      - traefik.enable=true
      - traefik.docker.network=nginx-net
      ## HTTP Routers SHB (WordPress) Auth
      - "traefik.http.routers.nginx-shb-auth-rtr.entrypoints=websecure"
      - "traefik.http.routers.nginx-shb-auth-rtr.rule=Host(`www.$DNS_DOMAIN`) && Path(`/wp-login.php`)"
      - "traefik.http.routers.nginx-shb-auth-rtr.priority=100"
      ## HTTP Routers SHB (WordPress) Bypass
      - "traefik.http.routers.nginx-shb-rtr.entrypoints=websecure"
      - "traefik.http.routers.nginx-shb-rtr.rule=Host(`$DNS_DOMAIN`) || Host(`www.$DNS_DOMAIN`)"
      - "traefik.http.routers.nginx-shb-rtr.priority=99"
      ## HTTP Routers DASH (non-WordPress)
      # - "traefik.http.routers.nginx-dash-rtr.entrypoints=websecure"
      # - "traefik.http.routers.nginx-dash-rtr.rule=Host(`dash.$DNS_DOMAIN`)"
      ## HTTP Routers KHUB (non-WordPress)
      # - "traefik.http.routers.nginx-khub-rtr.entrypoints=websecure"
      # - "traefik.http.routers.nginx-khub-rtr.rule=Host(`$OTHER_DOMAIN`) || Host(`www.$OTHER_DOMAIN`)"
      # Redirect shb non-www to www middleware
      - "traefik.http.middlewares.shb-redirect.redirectregex.regex=^https?://$DNS_DOMAIN/(.*)"
      - "traefik.http.middlewares.shb-redirect.redirectregex.replacement=https://www.$DNS_DOMAIN/$${1}"
      - "traefik.http.middlewares.shb-redirect.redirectregex.permanent=true"
      # Redirect khub non-www to www middleware
      # - "traefik.http.middlewares.khub-redirect.redirectregex.regex=^https?://$OTHER_DOMAIN/(.*)"
      # - "traefik.http.middlewares.khub-redirect.redirectregex.replacement=https://www.$OTHER_DOMAIN/$${1}"
      # - "traefik.http.middlewares.khub-redirect.redirectregex.permanent=true"
      ## Middlewares
      # - "traefik.http.routers.nginx-khub-rtr.middlewares=khub-redirect,chain-no-auth@file"
      # - "traefik.http.routers.nginx-shb-rtr.middlewares=shb-redirect,chain-no-auth@file"
      # - "traefik.http.routers.nginx-shb-auth-rtr.middlewares=shb-redirect,chain-basic-auth@file"
      # - "traefik.http.routers.nginx-dash-rtr.middlewares=chain-basic-auth@file"
      ## HTTP Services
      - "traefik.http.routers.nginx-shb-rtr.service=nginx-svc"
      - "traefik.http.routers.nginx-shb-auth-rtr.service=nginx-svc"
      # - "traefik.http.routers.nginx-khub-rtr.service=nginx-svc"
      # - "traefik.http.routers.nginx-dash-rtr.service=nginx-svc"
      - "traefik.http.services.nginx-svc.loadbalancer.server.port=80"
  php7:
    <<: *common-keys-apps
    image: php:7.4-fpm-custom
    container_name: php7
    profiles: ["apps", "backend", "wordpress", "all"]
    build:
      context: ${DOCKERDIR}/custom/
      dockerfile: Dockerfile-php7
    user: $PUID:$PGID # allows upgrading WP and plugins
    networks:
      - nginx-private-net
    volumes:
      - ${DOCKERDIR}/sites/wordpress:/var/www/html/wordpress
      - ${DOCKERDIR}/php/php7:/usr/local/etc/php
      # - ${DOCKERDIR}/sites/khub/html:/var/www/html/khub
      # - ${DOCKERDIR}/sites/dash/html:/var/www/html/dash
    labels:
      - com.centurylinklabs.watchtower.enable=false
      - traefik.enable=false
  mariadb-wordpress:
    <<: *common-keys-apps
    image: linuxserver/mariadb:110.4.14mariabionic-ls77
    container_name: wordpress-db
    profiles: ["apps", "backend", "wordpress", "all"]
    networks:
      - nginx-private-net
    # secrets:
    #   - wordpress_db_root
    volumes:
      - ${DOCKERDIR}/appdata/wordpress_db/config:/config
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    environment:
      <<: *default-tz-puid-pgid
      MYSQL_ROOT_PASSWORD: ${WORDPRESS_DB_ROOT}
      # MYSQL_ROOT_PASSWORD_FILE: /run/secrets/wordpress_db_root
    labels:
      - com.centurylinklabs.watchtower.enable=false
      - traefik.enable=false
  
  # Drone
  drone:
    <<: *common-keys-apps
    image: drone/drone:2
    container_name: drone
    profiles: ["apps", "admin", "drone", "all"]
    env_file:
      - .env
    environment:
      <<: *default-tz-puid-pgid
      DRONE_SERVER_HOST: drone.tripsit.io
      DRONE_SERVER_PROTO: https
    networks:
      - drone-net
      - drone_private-net
    volumes:
      - ${DOCKERDIR}/appdata/drone/data:/data
    labels:
    - com.centurylinklabs.watchtower.enable=true
    - traefik.enable=true
    - traefik.docker.network=drone-net
    - traefik.http.services.drone-svc.loadbalancer.server.port=80
    - traefik.http.routers.drone-rtr.rule=Host(`drone.${DNS_DOMAIN}`)
    - traefik.http.routers.drone-rtr.entrypoints=websecure
    - traefik.http.routers.drone-rtr.service=drone-svc
    - traefik.http.routers.drone-rtr.tls=true
    - traefik.http.routers.drone-rtr.middlewares=chain-no-auth@file
  drone_runner:
    <<: *common-keys-apps
    image: drone/drone-runner-docker:1
    container_name: drone_runner
    profiles: ["apps", "backend", "drone", "all"]
    networks:
      - drone_private-net
      - socket-net
    volumes:
      - ${USERDIR}/tripsit-live/docker-compose.yml:/docker/docker-compose.yml:ro
    env_file:
      - .env
    environment:
      <<: *default-tz-puid-pgid
      DOCKER_HOST: tcp://socket-proxy:2375
      # DRONE_RPC_PROTO: http
      DRONE_RPC_HOST: drone
      DRONE_RPC_SECRET: ${DRONE_RPC_SECRET}
      DRONE_RUNNER_CAPACITY: 2
      DRONE_RUNNER_NAME: drone_runner
      DRONE_DOCKER_NETWORK_ID: socket-net
      DRONE_RUNNER_NETWORKS: socket-net
      DRONE_RUNNER_PRIVILEGED_IMAGES: plugins/docker, docker
      DRONE_RUNNER_VOLUMES: ${USERDIR}/tripsit-live/docker-compose.yml:/drone/src/docker-compose.host.yml,${USERDIR}/tripsit-live/.env:/drone/src/.env
    # labels: 
    #   - traefik.enable=false
  
  # Frontend
  organizr:
    <<: *common-keys-apps
    image: organizr/organizr
    container_name: organizr
    profiles: ["apps", "frontend", "all"]
    environment:
      <<: *default-tz-puid-pgid
      fpm: true
    networks:
      organizr-net:
    volumes:
      - ${DOCKERDIR}/appdata/organizr/config:/config
    labels:
      - com.centurylinklabs.watchtower.enable=true
      - traefik.enable=true
      - traefik.docker.network=organizr-net
      - traefik.http.services.organizr-svc.loadbalancer.server.port=80
      - traefik.http.routers.organizr-rtr.rule=Host(`home.${DNS_DOMAIN}`)
      - traefik.http.routers.organizr-rtr.entrypoints=websecure
      - traefik.http.routers.organizr-rtr.service=organizr-svc
      - traefik.http.routers.organizr-rtr.tls=true
      - traefik.http.routers.organizr-rtr.middlewares=chain-no-auth@file
  lounge_vip:
    <<: *common-keys-apps
    image: thelounge/thelounge:latest
    container_name: lounge_vip
    profiles: ["apps", "frontend", "irc", "all"]
    networks:
      - lounge-net
    volumes:
      - ${DOCKERDIR}/appdata/lounge_vip/:/var/opt/thelounge
    labels:
    - com.centurylinklabs.watchtower.enable=true
    - traefik.enable=true
    - traefik.docker.network=lounge-net
    - traefik.http.services.lounge-svc.loadbalancer.server.port=9000
    - traefik.http.routers.lounge-rtr.rule=Host(`lounge.${DNS_DOMAIN}`)
    - traefik.http.routers.lounge-rtr.entrypoints=websecure
    - traefik.http.routers.lounge-rtr.service=lounge-svc
    - traefik.http.routers.lounge-rtr.tls=true
    - traefik.http.routers.lounge-rtr.middlewares=chain-no-auth@file
  privatebin:
    <<: *common-keys-apps
    image: privatebin/nginx-fpm-alpine
    container_name: privatebin
    profiles: ["apps", "frontend", "all"]
    networks:
      - privatebin-net
      # - socket-net
    volumes:
      - ${DOCKERDIR}/appdata/privatebin/data:/srv/data 
    labels:
      # - DOCKER_HOST=tcp://socket-proxy:2375
      - com.centurylinklabs.watchtower.enable=true
      - traefik.enable=true
      - traefik.docker.network=privatebin-net
      - traefik.http.services.privatebin-svc.loadbalancer.server.port=8080
      - traefik.http.routers.privatebin-rtr.rule=Host(`privatebin.${DNS_DOMAIN}`)
      - traefik.http.routers.privatebin-rtr.entrypoints=websecure
      - traefik.http.routers.privatebin-rtr.service=privatebin-svc
      - traefik.http.routers.privatebin-rtr.tls=true
      - traefik.http.routers.privatebin-rtr.middlewares=chain-basic-auth@file

  # Tripbot
  tripbot_website:
    <<: *common-keys-apps
    build:
      context: https://github.com/tripsit/tripbot-website.git#main
      dockerfile: ./Dockerfile
      # Only will build development stage from our dockerfile
      # target: development
    container_name: tripbot_website
    profiles: ["apps", "frontend", "tripbot", "all"]
    working_dir: /usr/src/app
    environment:
      <<: *default-tz-puid-pgid
    networks:
      - tripbot-net
    labels:
    - com.centurylinklabs.watchtower.enable=true
    - traefik.enable=true
    - traefik.docker.network=tripbot-net
    - traefik.http.services.tripbot_website-svc.loadbalancer.server.port=8080
    - traefik.http.routers.tripbot_website-rtr.rule=Host(`tripbot.${DNS_DOMAIN}`, `${OTHER_DOMAIN}`)
    - traefik.http.routers.tripbot_website-rtr.entrypoints=websecure
    - traefik.http.routers.tripbot_website-rtr.service=tripbot_website-svc
    - traefik.http.routers.tripbot_website-rtr.tls=true
    - traefik.http.routers.tripbot_website-rtr.middlewares=chain-no-auth@file
  tripbot:
    <<: *common-keys-apps
    build:
      context: https://github.com/tripsit/tripbot.git#Docker-update
      dockerfile: ./Dockerfile
      # Only will build development stage from our dockerfile
      target: development
    container_name: tripbot
    profiles: ["apps", "frontend", "tripbot", "all"]
    working_dir: /usr/src/app
    env_file:
      - .env
    environment:
      <<: *default-tz-puid-pgid
    networks:
        - tripbot-net
        - database-net
    # Run a command against the development stage of the image
    command: npx tsc-watch --onSuccess "npx nodemon --config ./nodemon.json"
    labels:
    # - com.centurylinklabs.watchtower.enable=true
    - traefik.enable=true

  # Database
  database:
    <<: *common-keys-apps
    build:
      context: https://github.com/TripSit/database-admin.git#main
      dockerfile: ./Dockerfile-postgres
    container_name: database
    profiles: ["apps", "database", "all"]
    volumes:
      - ${DOCKERDIR}/appdata/database/data:/var/lib/postgresql/data
    networks:
        - database-net
    environment:
      <<: *default-tz-puid-pgid
      POSTGRES_USER: tripsit
      POSTGRES_DB: tripsit
      POSTGRES_PASSWORD: ${POSTGRESS_ROOT}
      POSTGRES_HOST_AUTH_METHOD: trust
    labels:
      # - com.centurylinklabs.watchtower.enable=true
      - traefik.enable=false
  database_frontend:
    # <<: *common-keys-apps
    build:
      context: https://github.com/TripSit/database-admin.git#main
      dockerfile: ./Dockerfile-pgadmin
    restart: unless-stopped
    container_name: database_frontend
    profiles: ["apps", "database", "all"]
    depends_on:
      - database
    networks:
        - database_frontend-net
        - database-net
    # volumes:
    #   # - ${DOCKERDIR}/appdata/pgadmin/pgadmin:/var/lib/pgadmin
    #   - /etc/timezone:/etc/timezone:ro
    #   - /etc/localtime:/etc/localtime:ro
    environment:
      <<: *default-tz-puid-pgid
      TZ: America/Chicago
      PGADMIN_DEFAULT_EMAIL: admin@tripsit.me
      PGADMIN_DEFAULT_PASSWORD: ${POSTGRESS_ADMIN_PASS}
    labels:
    # - com.centurylinklabs.watchtower.enable=true
    - traefik.enable=true
    - traefik.docker.network=database_frontend-net
    - traefik.http.services.database_frontend-svc.loadbalancer.server.port=80
    - traefik.http.routers.database_frontend-rtr.rule=Host(`database.${DNS_DOMAIN}`)
    - traefik.http.routers.database_frontend-rtr.entrypoints=websecure
    - traefik.http.routers.database_frontend-rtr.service=database_frontend-svc
    - traefik.http.routers.database_frontend-rtr.tls=true
    - traefik.http.routers.database_frontend-rtr.middlewares=chain-basic-auth@file
  database_backend:
    <<: *common-keys-apps
    build:
      context: https://github.com/TripSit/database-admin.git#main
      dockerfile: ./Dockerfile
      # Only will build development stage from our dockerfile
      target: development
    container_name: database_backend
    profiles: ["apps", "database", "all"]
    depends_on:
      - database
    command: npm run start
    # ports:
    #   - 5000:5000
    #   - 9229:9229
    networks:
      - database_backend-net
      - database-net
    volumes:
      # - ${DOCKERDIR}/appdata/database_backend/config:/usr/src/app
      # - ./src/scripts/init-db.sh:/docker-entrypoint-initdb.d/initialize-database.sh
      - /usr/src/app/node_modules
    environment:
      <<: *default-tz-puid-pgid
      PORT: 5000
      TZ: America/Chicago
      DATABASE_URL: postgres://tripsit:${POSTGRESS_ROOT}@database/tripsit
    labels:
      # - com.centurylinklabs.watchtower.enable=true
      - traefik.enable=true
      - traefik.docker.network=database_backend-net
      - traefik.http.services.database_backend-svc.loadbalancer.server.port=5000
      - traefik.http.routers.database_backend-rtr.rule=Host(`api.${DNS_DOMAIN}`)
      - traefik.http.routers.database_backend-rtr.entrypoints=websecure
      - traefik.http.routers.database_backend-rtr.service=database_backend-svc
      - traefik.http.routers.database_backend-rtr.tls=true
      - traefik.http.routers.database_backend-rtr.middlewares=chain-basic-auth@file

########################### VOLUMES
volumes:
  netdata-config:
    name: netdata-config
  netdata-lib:
    name: netdata-lib
  netdata-cache:
    name: netdata-cache
  pgadmin-data:
    name: pgadmin-data

########################### NETWORKS
networks:
  codimd-net:
    name: codimd-net
  database-net:
    name: database-net
  database_frontend-net:
    name: database_frontend-net
  database_backend-net:
    name: database_backend-net
  dozzle-net:
    name: dozzle-net
  duplicati-net:
    name: duplicati-net
  drone-net:
    name: drone-net
  drone_private-net:
    name: drone_private-net
  files-net:
    name: files-net
  gotify-net:
    name: gotify-net
  gitlab-net:
    name: gitlab-net
  gitlab-net-private:
    name: gitlab-net-private
  it-net:
    name: it-net
  kuma-net:
    name: kuma-net
  lounge-vip-net:
    name: lounge-vip-net
  lounge-net:
    name: lounge-net
  matrix-net:
    name: matrix-net
  mail-net:
    name: mail-net
  monica-net:
    name: monica-net
  netdata-net:
    name: netdata-net
  nginx-net:
    name: nginx-net
  nginx-private-net:
    name: nginx-private-net
  oauth-net:
    name: oauth-net
  organizr-net:
    name: organizr-net
  portainer-net:
    name: portainer-net
  postgres-net:
    name: postgres-net
  postgres-private-net:
    name: postgres-private-net
  privatebin-net:
    name: privatebin-net
  speedtest-net:
    name: speedtest-net
  socket-net:
    name: socket-net
  traefik-net:
    name: traefik-net
  tripbot-net:
    name: tripbot-net
  trilium-net:
    name: trilium-net

#### TODO

  # matrix:
  #   <<: *common-keys-apps
  #   image: matrixdotorg/synapse:latest
  #   container_name: matrix
  #   profiles: ["apps", "matrix", "all"]
  #   networks:
  #     - matrix-net
  #   volumes:
  #     - ${DOCKERDIR}/appdata/matrix/data:/data
  #   environment:
  #     - SYNAPSE_SERVER_NAME=TripSit
  #     - SYNAPSE_REPORT_STATS=yes
  #   command: generate
  #   labels:
  #   - com.centurylinklabs.watchtower.enable=true
  #   - traefik.enable=false
  #   # - traefik.docker.network=privatebin-net
  #   # - traefik.http.services.privatebin-svc.loadbalancer.server.port=8080
  #   # - traefik.http.routers.privatebin-rtr.rule=Host(`privatebin.${DNS_DOMAIN}`)
  #   # - traefik.http.routers.privatebin-rtr.entrypoints=websecure
  #   # - traefik.http.routers.privatebin-rtr.service=privatebin-svc
  #   # - traefik.http.routers.privatebin-rtr.tls=true
  #   # - traefik.http.routers.privatebin-rtr.middlewares=chain-basic-auth@file

  # Barman
  # barman:
  #   <<: *common-keys-apps
  #   image: ubcctlt/barman
  #   # https://hub.docker.com/r/ubcctlt/barman
  #   container_name: barman
  #   profiles: ["apps", "barman", "all"]
  #   volumes:
  #     - ${DOCKERDIR}/barman/cron.d:/etc/cron.d
  #     - ${DOCKERDIR}/barman/creds:/etc/creds
  #     # Barman configs
  #     # - ${DOCKERDIR}/barman/config/barman.conf:/etc/barman.conf
  #     # - ${DOCKERDIR}/barman/config/barman.d:/etc/barman/barman.d
  #     # cron job for taking weekly basebackups
  #     # - ./basebackups.cron:/etc/cron.d/basebackups:ro
  #     # The right side of this mount should be set to BARMAN_DATA_DIR.
  #     # - ${DOCKERDIR}/appdata/barman/:/var/lib/barman
  #     # The right side of this mount should be set to BARMAN_LOG_DIR.
  #     - ${DOCKERDIR}/logs/barman:/var/log/barman
  #     # Password file
  #     # - ${DOCKERDIR}/barman/pgpass:/private/pgpass:ro

  #   networks:
  #       - tripbot-net
  #   environment:
  #     <<: *default-tz-puid-pgid
  #     # DOCKER_HOST: tcp://socket-proxy:2375
  #     BARMAN_CRON_SRC: /etc/cron.d
  #     # BARMAN_LOG_DIR: /var/log/barman
  #     # BARMAN_SSH_KEY_DIR: /private/ssh
  #     # BARMAN_PGPASSFILE: /private/pgpass
  #     BARMAN_CRON_SCHEDULE: "* * * * *"
  #     # BARMAN_BACKUP_SCHEDULE: 0 4 * * * # Every day at 4 am
  #     BARMAN_BACKUP_SCHEDULE: "0 * * * *" # Every hour
  #     # BARMAN_LOG_LEVEL: INFO
  #     DB_HOST: database
  #     DB_PORT: 5432
  #     DB_SUPERUSER: barman
  #     DB_SUPERUSER_PASSWORD: ${BARMAN_PASSWORD}
  #     DB_SUPERUSER_DATABASE: tripsit
  #     DB_REPLICATION_USER: streaming_barman
  #     DB_REPLICATION_PASSWORD: ${BARMAN_STREAMING_PASSWORD}
  #     DB_SLOT_NAME: barman
  #     DB_BACKUP_METHOD: postgres
  #     GOOGLE_APPLICATION_CREDENTIALS: /etc/creds/gcloud.json

  #   labels:
  #     # - com.centurylinklabs.watchtower.enable=true
  #     - traefik.enable=false